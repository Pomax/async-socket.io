export const socketlessjs = atob("
const BROWSER = "browser";
const CLIENT = "client";

class RPCError {
  constructor(originName, message) {
    this.originName = originName;
    this.message = message;
  }
}

const DEBUG = false;

// importing the uuid package is way too expensive for what we need here
function uuid() {
  const now = Date.now().toString(16);
  const rdm = ((1e6 * Math.random()) | 0).toString(16);
  return `${now}-${rdm}`;
}

// responses should always be "the event name, with :response added"
export const RESPONSE_SUFFIX = `:response`;
export const getResponseName = (eventName) => `${eventName}${RESPONSE_SUFFIX}`;

// use symbols so we don't pollute the socket prototype
const ORIGIN = Symbol(`origin`);
const PROXY = Symbol(`proxy`);
const RECEIVER = Symbol(`receiver`);
const REMOTE = Symbol(`remote`);
const HANDLERS = Symbol(`handlers`);

/**
 * ...
 */
class UpgradedSocket extends WebSocket {
  [ORIGIN] = undefined; // the socket owner who invoked the upgrade. See upgrade()
  [PROXY] = undefined; // the proxy object associated with this socket
  [RECEIVER] = ``; // name of the receiving object
  [REMOTE] = ``; // name of the remote object
  [HANDLERS] = {}; // the list of event handlers. See upgrade()

  // explicitly forbid the constructor from being used.
  // @ts-ignore: we don't need to call super() if we error out.
  constructor() {
    throw new Error(
      "Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.",
    );
  }

  // upgrade a socket from plain WebSocket to this class instead.
  static upgrade(socket, origin, receiver, remote) {
    if (socket instanceof UpgradedSocket) return socket;
    // update the prototype binding
    Object.setPrototypeOf(socket, UpgradedSocket.prototype);
    // make sure that messages go through the router:
    socket[ORIGIN] = origin;
    socket[RECEIVER] = receiver;
    socket[REMOTE] = remote;
    socket[HANDLERS] = {};
    const messageRouter = socket.router.bind(socket);
    if (socket.on) {
      socket.on(`message`, messageRouter);
    } else {
      socket.onmessage = messageRouter;
    }

    // convenience return.
    return socket;
  }

  // Special accessor for upgraded socket functions,
  get upgraded() {
    if (!this.__upgraded) {
      this.__upgraded = {
        on: (...args) => this.__on(...args),
        off: (...args) => this.__off(...args),
        send: (...args) => this.__send(...args),
      };
    }
    return this.__upgraded;
  }

  // message router specifically for the message format used by the socketless code.
  async router(message, forced = false) {
    const { [ORIGIN]: origin, [RECEIVER]: receiver, [REMOTE]: remote } = this;

    // Any calls from the browser to the webclient are that's already handled
    // by the websocket directly (see the createWebClient function in index.js,
    // in the ws.on(`connection`, ...) block), so we need to make sure to not
    // try to "double-handle" that:
    if (remote === BROWSER && !forced) {
      return;
    }

    // browser websocket? If so, unwrap the data
    if (message.srcElement) {
      message = message.data;
    }

    let data;

    try {
      data = JSON.parse(message);
    } catch (e) {
      return console.error(`Could not parse websocket data: ${message}`);
    }

    const { name: eventName, payload, error: errorMsg, diff, seq_num } = data;
    let { state } = data;
    let throwable = errorMsg ? new RPCError(receiver, errorMsg) : undefined;

    if (DEBUG)
      console.log(`[${receiver}]/[${remote}] router running given:`, {
        eventName,
        payload,
        errorMsg,
        state,
        diff,
        seq_num,
      });

    // Client-state synchronization mechanism for the browser:
    if (state && receiver === BROWSER) {
      if (DEBUG) console.log(`handling state update in the browser`, state);
      if (DEBUG) console.log(`origin object:`, { origin });
      const prevState = JSON.parse(JSON.stringify(origin.state));
      if (diff) {
        if (DEBUG) console.log(`received diff`, state);
        const patch = state;
        let target;
        // verify we're still in sync by comparing messaging sequence numbers
        if (seq_num === origin.__seq_num + 1) {
          origin.__seq_num = seq_num;
          target = JSON.parse(JSON.stringify(prevState));
          if (DEBUG) console.log(`applying patch to`, target);
          // @ts-ignore: this only runs in the browser, where rfc6902 is a global.
          rfc6902.applyPatch(target, patch);
        } else {
          // if we get here, we're not in sync, and we need to request a full
          // state object instead of trying to apply differential updates.
          if (DEBUG) console.log(`seq_num mismatch, syncing state`);
          const fullState = await this.__send(`syncState`);
          origin.__seq_num = 0;
          target = fullState;
        }
        state = target;
      }
      // Run the update with the new state as argument first, then
      // overwrite the old state with the new state after the update.
      origin.state = state;
      return origin.update(prevState);
    }

    // If this is a response message, run the `on` handler for that.
    if (eventName.endsWith(RESPONSE_SUFFIX)) {
      const { [HANDLERS]: handlers } = this;
      if (DEBUG) console.log(`[${receiver}] response message received`);
      if (!handlers[eventName]) throw new Error(`no handlers for ${eventName}`);
      handlers[eventName].forEach((handler) => {
        handler(throwable ? throwable : payload);
      });
      return;
    }

    // If we get here, this is a real RPC call rather than a response or state update.
    if (payload && !Array.isArray(payload)) {
      throw new Error(
        `[${receiver}] received payload for ${eventName} from [${remote}] but it was not an array? ${JSON.stringify(
          payload,
          null,
          2,
        )}`,
      );
    }

    // If it's a request message, resolve it to a function call and "return"
    // the value by sending a :response message over the websocket instead.
    const stages = eventName.split(`:`);
    if (DEBUG) console.log(`[${receiver}] router: stages:`, stages);

    let callable = origin;
    let forbidden = origin.__proto__?.constructor.disallowedCalls ?? [];
    let error = undefined;
    let response = undefined;

    // Find the actual function to call
    try {
      const [first] = stages;
      if (stages.length === 1 && forbidden.includes(first)) {
        throw new Error(`Illegal call: ${first} is a protected method`);
      }
      while (stages.length) {
        const stage = stages.shift();
        if (DEBUG) console.log(`checking ${stage}`);
        callable = callable[stage];
      }
      // If this code runs on the server, the function needs to be
      // called with the client proxy as first argument.
      if (receiver === `server`) payload.unshift(this[PROXY]);
    } catch (e) {
      // "function not found" doesn't count as error "here".
      // Instead, we send that back to the caller.
      if (DEBUG) console.error(`cannot resolve ${eventName} on ${receiver}`, e);
      error = e.message;
    }

    // Resolve the function and then send the result as :response, making
    // sure to take into account that a call itself might throw.
    if (!error) {
      try {
        response = (await callable.bind(origin)(...payload)) ?? true;
        // If this is a webclient, and there is a browser connected,
        // also make sure to trigger a state sync, so that client code
        // does not need to include setState calls all over the place.
        if (receiver === CLIENT && origin.browser) {
          origin.setState(origin.state);
        }
      } catch (e) {
        if (DEBUG)
          console.error(
            `function invocation for ${eventName} failed on ${receiver}, payload:`,
            payload,
          );
        if (DEBUG) console.error(e);
        error = `Cannot call [[${receiver}]].${eventName.replaceAll(
          `:`,
          `.`,
        )}, function is not defined.`;
      }
    }

    // Send off a response message with either the result, or the error.
    const responseName = getResponseName(eventName);
    if (DEBUG)
      console.log(`[${receiver}] sending ${responseName}`, {
        payload: response,
        error,
      });
    super.send(
      JSON.stringify({ name: responseName, payload: response, error }),
    );
  }

  /**
   * this.upgraded.on() made to work like .addEventListener()
   */
  __on(eventName, handler) {
    const { [HANDLERS]: handlers } = this;
    if (!handlers[eventName]) handlers[eventName] = [];
    handlers[eventName].push(handler);
    // return the corresponding "off" function, for convenience.
    return () => this.__off(eventName, handler);
  }

  /**
   * this.upgraded.off() made to work like .removeEventListener()
   */
  __off(eventName, handler) {
    const { [HANDLERS]: handlers } = this;
    if (!handlers[eventName]) return;
    const pos = handlers[eventName].indexOf(handler);
    handlers[eventName].splice(pos, 1);
  }

  /**
   * Add a promise-based emit/receive to the socket, so that calling code can `await` the response.
   *
   * Note that there is an optional third argument `timeout` that can be used to say how long the
   * emit should wait before deciding there is no response forthcoming and to clean up the event
   * listener for that response. The default timeout is 1000ms.
   */
  async __send(eventName, data = {}, timeout = 1000) {
    const { [RECEIVER]: receiver, [REMOTE]: remote } = this;
    if (DEBUG)
      console.log(`[${receiver}] sending [${eventName}] to [${remote}]:`, data);
    return await new Promise((resolve, reject) => {
      const responseName = getResponseName(eventName);

      // cleanup function for the event listener
      let cleanup = (data = undefined) => {
        if (DEBUG) console.log(`[${receiver}] cleanup`);
        // clean up and become a noop so we can't be retriggered.
        this.__off(responseName, handler);
        cleanup = () => {};
        resolve(data);
      };

      // In order to resolve the Promise, we will be listening
      // for that eventName:response, and when we receive it,
      // we'll immediately STOP listening for similar responses
      // because we no longer care.
      const handler = (data) => cleanup(data);

      // First, make sure we're ready to receive the response...
      this.__on(responseName, (data) => {
        if (DEBUG)
          console.log(
            `[${receiver}] handling response for ${eventName} from [${remote}]:`,
          );
        handler(data);
      });

      // And then, send the event off to the client.
      const sendEvent = () => {
        if (DEBUG)
          console.log(
            `(raw) sending ${eventName} from ${receiver} to ${remote}`,
          );
        super.send(
          JSON.stringify({
            name: eventName,
            payload: data,
          }),
        );
      };

      // We may be trying to send before the socket is open in browser land,
      // so if the socket's not ready, "queue" the event to fire on open.
      if (super.readyState === 1) sendEvent();
      else super.onopen = sendEvent;

      // And make sure that if no response has occurred within
      // `timeout` milliseconds, we clean up the listener.
      if (isFinite(timeout)) {
        setTimeout(() => cleanup(), timeout);
      }
    });
  }
}

/**
 * A socket proxy for RPC purposes.
 */
class SocketProxy extends Function {
  constructor(socket, receiver, remote, path = ``) {
    super();
    this[RECEIVER] = receiver;
    this[REMOTE] = remote;
    this.id = uuid();
    this.path = path;
    this.socket = socket;
    return new Proxy(this, {
      get: (_, prop) => {
        if (prop === "id") return this.id;
        if (prop === "socket") return this.socket;
        // @ts-ignore: we're never invoking this with Symbol as second argument
        return new SocketProxy(socket, receiver, remote, `${path}:${prop}`);
      },
      apply: async (_, __, args) => {
        if (DEBUG)
          console.log(
            `[SPapply] sending ${this.path.substring(1)} receiver ${
              this[RECEIVER]
            } to ${this[REMOTE]}`,
          );

        const data = await this.socket.upgraded.send(
          this.path.substring(1),
          args,
          this[REMOTE] === BROWSER ? Infinity : undefined,
        );

        if (data instanceof RPCError) {
          const argstr = [...new Array(args.length)]
            .map((_, i) => String.fromCharCode(97 + i))
            .join(`,`);

          if (DEBUG)
            console.error(
              `ERROR calling [[${data.originName}]].${this.path
                .substring(1)
                .replaceAll(`:`, `.`)}(${argstr}): ${data.message}`,
            );

          throw new Error(data.message);
        }

        return data;
      },
    });
  }
}

/**
 * ..docs go here...
 * @param {string} receiver
 * @param {string} remote
 * @param {*} origin
 * @param {*} socket
 * @returns
 */
function proxySocket(receiver, remote, origin, socket) {
  socket = UpgradedSocket.upgrade(socket, origin, receiver, remote);
  return (socket[PROXY] = new SocketProxy(socket, receiver, remote));
}


    export function createWebClient(WebClientClass) {
      const socket = new WebSocket(window.location.toString().replace("http", "ws"));
      const browserClient = new WebClientClass();
      Object.defineProperty(browserClient, "socket", {
        value: socket,
        writable: false,
        configurable: false,
        enumerable: false
      });
      Object.defineProperty(browserClient, "server", {
        value: proxySocket("browser", "webclient", browserClient, socket),
        writable: false,
        configurable: false,
        enumerable: false
      });
      Object.defineProperty(browserClient, "quit", {
        value: () => browserClient.server.disconnect()
      });
      browserClient.state = {};
      browserClient.init();
      return browserClient;
    };
  
(function(p,r){"object"===typeof exports&&"undefined"!==typeof module?r(exports):"function"===typeof define&&define.amd?define(["exports"],r):(p="undefined"!==typeof globalThis?globalThis:p||self,r(p.rfc6902={}))})(this,function(p){function r(a){return a.replace(/~1/g,"/").replace(/~0/g,"~")}function E(a){return a.replace(/~/g,"~0").replace(/\//g,"~1")}function z(a){return void 0===a?"undefined":null===a?"null":Array.isArray(a)?"array":typeof a}function v(a){if(null==a||"object"!=typeof a)return a;
if(a.constructor==Array){var b=a.length,c=Array(b);for(let d=0;d<b;d++)c[d]=v(a[d]);return c}if(a.constructor==Date)return new Date(+a);b={};for(c in a)w.call(a,c)&&(b[c]=v(a[c]));return b}function F({op:a}){return"remove"===a||"replace"===a||"copy"===a||"move"===a}function A(a,b){const c={};for(const d in a)w.call(a,d)&&void 0!==a[d]&&(c[d]=1);for(const d in b)w.call(b,d)&&void 0!==b[d]&&delete c[d];return Object.keys(c)}function G(a){const b=a.length,c={};for(let d=0;d<b;d++){const e=a[d];for(const f in e)w.call(e,
f)&&void 0!==e[f]&&(c[f]=(c[f]||0)+1)}for(const d in c)c[d]<b&&delete c[d];return Object.keys(c)}function x(a,b){return{operations:a.operations.concat(b),cost:a.cost+1}}function H(a,b,c,d=q){function e(k,g){const h=`${k},${g}`;var l=f[h];if(void 0===l){if(0<k&&0<g&&!d(a[k-1],b[g-1],c.add(String(k-1))).length)l=e(k-1,g-1);else{l=[];if(0<k){var t=e(k-1,g);l.push(x(t,{op:"remove",index:k-1}))}0<g&&(t=e(k,g-1),l.push(x(t,{op:"add",index:k-1,value:b[g-1]})));0<k&&0<g&&(t=e(k-1,g-1),l.push(x(t,{op:"replace",
index:k-1,original:a[k-1],value:b[g-1]})));l=l.sort((I,J)=>I.cost-J.cost)[0]}f[h]=l}return l}const f={"0,0":{operations:[],cost:0}},B=isNaN(a.length)||0>=a.length?0:a.length;var u=isNaN(b.length)||0>=b.length?0:b.length;u=e(B,u).operations;[u]=u.reduce(([k,g],h)=>{if("add"===h.op){var l=h.index+1+g;h={op:h.op,path:c.add(l<B+g?String(l):"-").toString(),value:h.value};return[k.concat(h),g+1]}if("remove"===h.op)return h={op:h.op,path:c.add(String(h.index+g)).toString()},[k.concat(h),g-1];l=c.add(String(h.index+
g));h=d(h.original,h.value,l);return[k.concat(...h),g]},[[],0]);return u}function K(a,b,c,d=q){const e=[];A(a,b).forEach(f=>{e.push({op:"remove",path:c.add(f).toString()})});A(b,a).forEach(f=>{e.push({op:"add",path:c.add(f).toString(),value:b[f]})});G([a,b]).forEach(f=>{e.push(...d(a[f],b[f],c.add(f)))});return e}function q(a,b,c,d=q){if(a===b)return[];const e=z(a),f=z(b);return"array"==e&&"array"==f?H(a,b,c,d):"object"==e&&"object"==f?K(a,b,c,d):[{op:"replace",path:c.toString(),value:b}]}function y(a,
b,c){Array.isArray(a)?"-"==b?a.push(c):(b=parseInt(b,10),a.splice(b,0,c)):a[b]=c}function C(a,b){Array.isArray(a)?(b=parseInt(b,10),a.splice(b,1)):delete a[b]}function L(a,b){a=m.fromJSON(b.path).evaluate(a);if(null===a.parent)return new n(b.path);if(Array.isArray(a.parent)){if(parseInt(a.key,10)>=a.parent.length)return new n(b.path)}else if(void 0===a.value)return new n(b.path);a.parent[a.key]=b.value;return null}function M(a,b){switch(b.op){case "add":return a=m.fromJSON(b.path).evaluate(a),void 0===
a.parent?b=new n(b.path):(y(a.parent,a.key,v(b.value)),b=null),b;case "remove":return a=m.fromJSON(b.path).evaluate(a),void 0===a.value?b=new n(b.path):(C(a.parent,a.key),b=null),b;case "replace":return L(a,b);case "move":var c=m.fromJSON(b.from).evaluate(a);void 0===c.value?b=new n(b.from):(a=m.fromJSON(b.path).evaluate(a),void 0===a.parent?b=new n(b.path):(C(c.parent,c.key),y(a.parent,a.key,c.value),b=null));return b;case "copy":return c=m.fromJSON(b.from).evaluate(a),void 0===c.value?b=new n(b.from):
(a=m.fromJSON(b.path).evaluate(a),void 0===a.parent?b=new n(b.path):(y(a.parent,a.key,v(c.value)),b=null)),b;case "test":return a=m.fromJSON(b.path).evaluate(a),b=q(a.value,b.value,new m).length?new N(a.value,b.value):null,b}return new O(b)}function P(a){function b(c,d,e){const f=a(c,d,e);return Array.isArray(f)?f:q(c,d,e,b)}return b}function D(a,b){a=m.fromJSON(b).evaluate(a);if(void 0!==a)return{op:"test",path:b,value:a.value}}class m{constructor(a=[""]){this.tokens=a}static fromJSON(a){const b=
a.split("/").map(r);if(""!==b[0])throw Error(`Invalid JSON Pointer: ${a}`);return new m(b)}toString(){return this.tokens.map(E).join("/")}evaluate(a){let b=null,c="";for(let d=1,e=this.tokens.length;d<e;d++)b=a,c=this.tokens[d],"__proto__"!=c&&"constructor"!=c&&"prototype"!=c&&(a=(b||{})[c]);return{parent:b,key:c,value:a}}get(a){return this.evaluate(a).value}set(a,b){for(let c=1,d=this.tokens.length-1,e=this.tokens[c];c<d;c++)a=(a||{})[e];a&&(a[this.tokens[this.tokens.length-1]]=b)}push(a){this.tokens.push(a)}add(a){a=
this.tokens.concat(String(a));return new m(a)}}const w=Object.prototype.hasOwnProperty;class n extends Error{constructor(a){super(`Value required at path: ${a}`);this.path=a;this.name="MissingError"}}class N extends Error{constructor(a,b){super(`Test failed: ${a} != ${b}`);this.actual=a;this.expected=b;this.name="TestError"}}class O extends Error{constructor(a){super(`Invalid operation: ${a.op}`);this.operation=a;this.name="InvalidOperationError"}}p.applyPatch=function(a,b){return b.map(c=>M(a,c))};
p.createPatch=function(a,b,c){const d=new m;return(c?P(c):q)(a,b,d)};p.createTests=function(a,b){const c=[];b.filter(F).forEach(d=>{const e=D(a,d.path);e&&c.push(e);"from"in d&&(d=D(a,d.from))&&c.push(d)});return c};Object.defineProperty(p,"__esModule",{value:!0})});
");
