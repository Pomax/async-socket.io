import gg from"node:http";import Ig from"node:https";import{WebSocket as Zg,WebSocketServer as lg}from"ws";import{WebSocket as Cg}from"ws";var F="server",K="client",U="webclient",S="browser";var J=class{constructor(l,g){this.originName=l,this.message=g}},b=!1;function ng(){let C=Date.now().toString(16),l=(1e6*Math.random()|0).toString(16);return`${C}-${l}`}var w=":response",v=C=>`${C}${w}`,f=Symbol("origin"),k=Symbol("proxy"),p=Symbol("receiver"),y=Symbol("remote"),R=Symbol("handlers"),L=class C extends Cg{[f]=void 0;[k]=void 0;[p]="";[y]="";[R]={};constructor(){throw new Error("Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.")}static upgrade(l,g,I,c){if(l instanceof C)return l;Object.setPrototypeOf(l,C.prototype),l[f]=g,l[p]=I,l[y]=c,l[R]={};let n=l.router.bind(l);return l.on?l.on("message",n):l.onmessage=n,l}get upgraded(){return this.__upgraded||(this.__upgraded={on:(...l)=>this.__on(...l),off:(...l)=>this.__off(...l),send:(...l)=>this.__send(...l)}),this.__upgraded}async router(l,g=!1){let{[f]:I,[p]:c,[y]:n}=this;if(n===S&&!g)return;l.srcElement&&(l=l.data);let s;try{s=JSON.parse(l)}catch{return console.error(`Could not parse websocket data: ${l}`)}let{name:i,payload:o,error:t,diff:A,seq_num:Z}=s,{state:e}=s,G=t?new J(c,t):void 0;if(b&&console.log(`[${c}]/[${n}] router running given:`,{eventName:i,payload:o,errorMsg:t,state:e,diff:A,seq_num:Z}),e&&c===S){b&&console.log("handling state update in the browser",e),b&&console.log("origin object:",{origin:I});let d=JSON.parse(JSON.stringify(I.state));if(A){b&&console.log("received diff",e);let r=e,u;if(Z===I.__seq_num+1)I.__seq_num=Z,u=JSON.parse(JSON.stringify(d)),b&&console.log("applying patch to",u),rfc6902.applyPatch(u,r);else{b&&console.log("seq_num mismatch, syncing state");let cg=await this.__send("syncState");I.__seq_num=0,u=cg}e=u}return I.state=e,I.update(d)}if(i.endsWith(w)){let{[R]:d}=this;if(b&&console.log(`[${c}] response message received`),!d[i])throw new Error(`no handlers for ${i}`);d[i].forEach(r=>{r(G||o)});return}if(o&&!Array.isArray(o))throw new Error(`[${c}] received payload for ${i} from [${n}] but it was not an array? ${JSON.stringify(o,null,2)}`);let m=i.split(":");b&&console.log(`[${c}] router: stages:`,m);let a=I,B=I.__proto__?.constructor.disallowedCalls??[],W,V;try{let[d]=m;if(m.length===1&&B.includes(d))throw new Error(`Illegal call: ${d} is a protected method`);for(;m.length;){let r=m.shift();b&&console.log(`checking ${r}`),a=a[r]}c==="server"&&o.unshift(this[k])}catch(d){b&&console.error(`cannot resolve ${i} on ${c}`,d),W=d.message}if(!W)try{V=await a.bind(I)(...o)??!0,c===K&&I.browser&&I.setState(I.state)}catch(d){b&&console.error(`function invocation for ${i} failed on ${c}, payload:`,o),b&&console.error(d),W=`Cannot call [[${c}]].${i.replaceAll(":",".")}, function is not defined.`}let X=v(i);b&&console.log(`[${c}] sending ${X}`,{payload:V,error:W}),super.send(JSON.stringify({name:X,payload:V,error:W}))}__on(l,g){let{[R]:I}=this;return I[l]||(I[l]=[]),I[l].push(g),()=>this.__off(l,g)}__off(l,g){let{[R]:I}=this;if(!I[l])return;let c=I[l].indexOf(g);I[l].splice(c,1)}async __send(l,g={},I=1e3){let{[p]:c,[y]:n}=this;return b&&console.log(`[${c}] sending [${l}] to [${n}]:`,g),await new Promise((s,i)=>{let o=v(l),t=(e=void 0)=>{b&&console.log(`[${c}] cleanup`),this.__off(o,A),t=()=>{},s(e)},A=e=>t(e);this.__on(o,e=>{b&&console.log(`[${c}] handling response for ${l} from [${n}]:`),A(e)});let Z=()=>{b&&console.log(`(raw) sending ${l} from ${c} to ${n}`),super.send(JSON.stringify({name:l,payload:g}))};super.readyState===1?Z():super.onopen=Z,isFinite(I)&&setTimeout(()=>t(),I)})}},z=class C extends Function{constructor(l,g,I,c=""){return super(),this[p]=g,this[y]=I,this.id=ng(),this.path=c,this.socket=l,new Proxy(this,{get:(n,s)=>s==="id"?this.id:s==="socket"?this.socket:new C(l,g,I,`${c}:${s}`),apply:async(n,s,i)=>{b&&console.log(`[SPapply] sending ${this.path.substring(1)} receiver ${this[p]} to ${this[y]}`);let o=await this.socket.upgraded.send(this.path.substring(1),i,this[y]===S?1/0:void 0);if(o instanceof J){let t=[...new Array(i.length)].map((A,Z)=>String.fromCharCode(97+Z)).join(",");throw b&&console.error(`ERROR calling [[${o.originName}]].${this.path.substring(1).replaceAll(":",".")}(${t}): ${o.message}`),new Error(o.message)}return o}})}};function N(C,l,g,I){return I=L.upgrade(I,g,C,l),I[k]=new z(I,C,l)}var h=!1,T=Symbol();function x(C){return class Q extends C{static get disallowedCalls(){let g=Object.getOwnPropertyNames(Q.prototype);return["constructor","disconnect"].forEach(I=>g.splice(g.indexOf(I),1)),g}constructor(){super();let g=this[T]={},I=new Proxy(g,{get:(c,n)=>g[n],set:()=>{throw new Error("cannot directly assign to state, use setState(update)")}});Object.defineProperty(this,"state",{value:I,writable:!1,configurable:!1}),this.onConnect||(this.onConnect=async()=>{h&&console.log(`[ClientBase] client ${this.state.id} connected.`)}),this.onDisconnect||(this.onDisconnect=async()=>{h&&console.log(`[ClientBase] client ${this.state.id} disconnected.`)}),this.onQuit||(this.onQuit=async()=>{h&&console.log(`[ClientBase] client ${this.state.id} quitting.`)})}setState(g){h&&console.log("[ClientBase] updating state");let I=this[T];Object.entries(g).forEach(([c,n])=>I[c]=n)}connectServerSocket(g){h&&console.log("[ClientBase]  connected to server"),this.server=N(K,F,this,g),this.onConnect()}disconnect(){this.server.socket.close()}}}function E(C){return class j extends C{clients=[];ws=void 0;webserver=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(j.prototype);return g.splice(g.indexOf("constructor"),1),g}constructor(g,I){super(),this.ws=g,this.webserver=I}async connectClientSocket(g){h&&console.log("[ServerBase] client connecting to server...");let I=N(F,K,this,g);h&&console.log("[ServerBase] sending connection id"),I.socket.send(JSON.stringify({name:"handshake:setid",payload:{id:I.id}})),h&&console.log("[ServerBase] adding client to list of known clients"),this.clients.push(I),this.addDisconnectHandling(I,g),this.onConnect(I)}async addDisconnectHandling(g,I){let{clients:c}=this;I.on("close",()=>{let n=c.findIndex(s=>s===g);if(n!==-1){let s=c.splice(n,1)[0];this.onDisconnect(g)}})}async onDisconnect(g){if(super.onDisconnect)return super.onDisconnect(g);h&&console.log(`[ServerBase] client ${g.id} disconnected.`)}async onConnect(g){if(super.onConnect)return super.onConnect(g);h&&console.log(`[ServerBase] client ${g.id} connected.`)}async quit(){await this.onQuit(),this.clients.forEach(g=>g.disconnect()),this.webserver.close(),this.ws.close(),this.teardown()}async onQuit(){if(super.onQuit)return super.onQuit();h&&console.log("[ServerBase] told to quit.")}async teardown(){if(super.teardown)return super.teardown();h&&console.log("[ServerBase] post-quit teardown.")}}}import{createPatch as og}from"rfc6902";var Y=!1;function P(C){return class O extends C{browser=void 0;constructor(){super(),this.onBrowserConnect||(this.onBrowserConnect=async g=>{Y&&console.log("[WebClientBase] browser connected.")}),this.onBrowserDisconnect||(this.onBrowserDisconnect=async g=>{Y&&console.log("[WebClientBase] browser disconnected.")})}static get disallowedCalls(){let g=Object.getOwnPropertyNames(O.prototype).concat(C.disallowedCalls);return["constructor","quit","syncState"].forEach(I=>g.splice(g.indexOf(I),1)),g}connectBrowserSocket(g){this.browser||(this.browser=N(U,S,this,g),this.browser.socket.__seq_num=0,this.setState(this.state),this.onBrowserConnect(this.browser))}disconnectBrowserSocket(){this.onBrowserDisconnect(this.browser),this.browser=void 0}setState(g){if(Y&&console.log("[WebClientBase] setState"),super.setState(g),Y&&console.log("[WebClientBase] client has browser?",!!this.browser),this.browser){Y&&console.log("[WebClientBase] creating diff as part of setState");let I=og(this.__oldState??{},this.state);if(I.length>0){let c={state:I,seq_num:++this.browser.socket.__seq_num,diff:!0};Y&&console.log("[WebClientBase] sending diff as part of setState:",c),this.browser.socket.send(JSON.stringify(c))}else Y&&console.log("no difference, skipping state sync.")}this.__oldState=JSON.parse(JSON.stringify(this.state))}syncState(){if(this.browser){Y&&console.log("[WebClientBase] running syncState (will respond with full state)");let g=JSON.parse(JSON.stringify(this.state));return this.browser.socket.__seq_num=0,Y&&console.log("[WebClientBase] responding with full state:",g),g}throw new Error("[WebClientBase] Cannot sync state: no browser attached to client.")}quit(){this.browser&&(this.browser.socket.close(),this.disconnectBrowserSocket()),this.disconnect(),this.onQuit()}}}var H=class{constructor(l){this.owner=l,this.routes={}}addRouteHandler(l,g){this.routes[l]=g}handle(l,g,I){let c=this.routes[l];return c?(this.owner?c(this.owner,g,I):c(g,I),!0):!1}};import tg from"node:fs";import{join as M}from"node:path";var D=atob("");var _={".html":"text/html",".css":"text/css",".js":"application/javascript",".jpg":"image/jpeg",".png":"image/png"},ig="text/plain";function $(C){let l=Object.keys(_).find(I=>C.slice(-I.length)===I);return _[l]||ig}function eg(C,l){return C==="/"?M(l,"index.html"):(C=C.substring(1),C=C.replaceAll("../","/").replace(/\/+/g,"/"),C=M(l,C),C)}function sg(C,l){console.error(`Can't serve ${C}, so it probably doesn't exist`),l.writeHead(404,{"Content-Type":"text/html"}),l.end("<doctype html><html><body>resource not found</body></html>")}function q(C,l){return(g,I)=>{if(g.url.includes("?")){let[s,i]=g.url.split(/\\?\?/);g.url=s,g.params=new URLSearchParams(i)}let c=g.url;if(c==="/favicon.ico")return I.writeHead(200,{"Content-Type":"text/plain"}),I.end("","utf-8");if(c==="/socketless.js")return I.writeHead(200,{"Content-Type":$(".js")}),I.end(D,"utf-8");if(!l.handle(c,g,I)){var n=eg(g.url,C);tg.readFile(n,(s,i)=>{if(s)return sg(n,I);I.writeHead(200,{"Content-Type":$(n)}),I.end(i,"utf-8")})}}}var dg=!0;function kg(C,l){C=x(C),l=E(l);let g=P(C),I={createServer:function(n){let s,i;n?.constructor===Object?i=n:s=n;let o=s;if(!o){let Z=new H,e=(G,m)=>{if(G.url.includes("?")){let[a,B]=G.url.split(/\\?\?/);G.url=a,G.params=new URLSearchParams(B)}Z.handle(G.url,G,m)};o=i?Ig.createServer(i,e):gg.createServer(e),o.addRoute=Z.addRouteHandler.bind(Z)}let t=new lg({noServer:!0});o.on("upgrade",(Z,e,G)=>{t.handleUpgrade(Z,e,G,m=>{t.emit("connection",m,Z)})});let A=new l(t,o);return t.on("connection",function(Z){A.connectClientSocket(Z)}),o},createClient:function(n,s,i=C){n=n.replace("http","ws");let o=new Zg(n,{rejectUnauthorized:!s}),t=new i;o.on("close",(...Z)=>t.onDisconnect(...Z));function A(Z){try{let{name:e,payload:G}=JSON.parse(Z);e==="handshake:setid"&&(o.off("message",A),t.setState(G),t.connectServerSocket(o))}catch{}}return o.on("message",A),t},createWebClient:function(n,s,i,o){let t=I.createClient(n,o,g),A=new H(t),Z=q(s,A),e=i?Ig.createServer(i,Z):gg.createServer(Z),G=new lg({noServer:!0});return e.on("upgrade",(m,a,B)=>{G.handleUpgrade(m,a,B,W=>{G.emit("connection",W,m)})}),t.ws=G,t.webserver=e,G.on("connection",m=>{t.connectBrowserSocket(m),m.on("message",async a=>{a=a.toString();let{name:B,payload:W,error:V}=JSON.parse(a);if(V)throw new Error(V);let X=v(B);if(B==="syncState"){let d=await t.syncState();return m.send(JSON.stringify({name:X,payload:d}))}if(B==="disconnect")return t.disconnect();if(B.endsWith(w))t.browser.socket.router(a,dg);else{let d=t.server,r=B.split(":");for(;r.length;)d=d[r.shift()];let u=await d(...W);m.send(JSON.stringify({name:X,payload:u}))}}),m.on("close",()=>{t.disconnectBrowserSocket()})}),e.addRoute=A.addRouteHandler.bind(A),e}};return I}export{kg as linkClasses};
