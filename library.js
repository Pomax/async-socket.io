import gg from"node:http";import Ig from"node:https";import{WebSocket as Zg,WebSocketServer as lg}from"ws";import{WebSocket as Cg}from"ws";var F="server",K="client",z="webclient",V="browser";var w=class{constructor(l,g){this.originName=l,this.message=g}},b=!1;function ig(){let C=Date.now().toString(16),l=(1e6*Math.random()|0).toString(16);return`${C}-${l}`}var H=":response",v=C=>`${C}${H}`,k=Symbol("origin"),f=Symbol("proxy"),p=Symbol("receiver"),u=Symbol("remote"),J=Symbol("handlers"),U=class C extends Cg{[k]=void 0;[f]=void 0;[p]="";[u]="";[J]={};constructor(){throw new Error("Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.")}static upgrade(l,g,I,c){if(l instanceof C)return l;Object.setPrototypeOf(l,C.prototype),l[k]=g,l[p]=I,l[u]=c,l[J]={};let i=l.router.bind(l);return l.on?l.on("message",i):l.onmessage=i,l}get upgraded(){return this.__upgraded||(this.__upgraded={on:(...l)=>this.__on(...l),off:(...l)=>this.__off(...l),send:(...l)=>this.__send(...l)}),this.__upgraded}async router(l,g=!1){let{[k]:I,[p]:c,[u]:i}=this;if(i===V&&!g)return;l.srcElement&&(l=l.data);let t;try{t=JSON.parse(l)}catch{return console.error(`Could not parse websocket data: ${l}`)}let{name:e,payload:o,error:n,diff:B,seq_num:Z}=t,{state:d}=t,G=n?new w(c,n):void 0;if(b&&console.log(`[${c}]/[${i}] router running given:`,{eventName:e,payload:o,errorMsg:n,state:d,diff:B,seq_num:Z}),d&&c===V){b&&console.log("handling state update in the browser",d),b&&console.log("origin object:",{origin:I});let s=JSON.parse(JSON.stringify(I.state));if(B){b&&console.log("received diff",d);let Y=d,y;if(Z===I.__seq_num+1)I.__seq_num=Z,y=JSON.parse(JSON.stringify(s)),b&&console.log("applying patch to",y),rfc6902.applyPatch(y,Y);else{b&&console.log("seq_num mismatch, syncing state");let cg=await this.__send("syncState");I.__seq_num=0,y=cg}d=y}return I.state=d,I.update?.(s)}if(e.endsWith(H)){let{[J]:s}=this;if(b&&console.log(`[${c}] response message received`),!s[e])throw new Error(`no handlers for ${e}`);s[e].forEach(Y=>{Y(G||o)});return}if(o&&!Array.isArray(o))throw new Error(`[${c}] received payload for ${e} from [${i}] but it was not an array? ${JSON.stringify(o,null,2)}`);let m=e.split(":");b&&console.log(`[${c}] router: stages:`,m);let A=I,h=I.__proto__?.constructor.disallowedCalls??[],W,X;try{let[s]=m;if(m.length===1&&h.includes(s))throw new Error(`Illegal call: ${s} is a protected method`);for(;m.length;){let Y=m.shift();b&&console.log(`checking ${Y}`),A=A[Y]}c==="server"&&o.unshift(this[f])}catch(s){b&&console.error(`cannot resolve ${e} on ${c}`,s),W=s.message}if(!W)try{X=await A.bind(I)(...o)??!0,c===K&&I.browser&&I.setState(I.state)}catch(s){b&&console.error(`function invocation for ${e} failed on ${c}, payload:`,o),b&&console.error(s),W=`Cannot call [[${c}]].${e.replaceAll(":",".")}, function is not defined.`}let S=v(e);b&&console.log(`[${c}] sending ${S}`,{payload:X,error:W}),super.send(JSON.stringify({name:S,payload:X,error:W}))}__on(l,g){let{[J]:I}=this;return I[l]||(I[l]=[]),I[l].push(g),()=>this.__off(l,g)}__off(l,g){let{[J]:I}=this;if(!I[l])return;let c=I[l].indexOf(g);I[l].splice(c,1)}async __send(l,g={},I=1e3){let{[p]:c,[u]:i}=this;return b&&console.log(`[${c}] sending [${l}] to [${i}]:`,g),await new Promise((t,e)=>{let o=v(l),n=(d=void 0)=>{b&&console.log(`[${c}] cleanup`),this.__off(o,B),n=()=>{},t(d)},B=d=>n(d);this.__on(o,d=>{b&&console.log(`[${c}] handling response for ${l} from [${i}]:`),B(d)});let Z=()=>{b&&console.log(`(raw) sending ${l} from ${c} to ${i}`),super.send(JSON.stringify({name:l,payload:g}))};super.readyState===1?Z():super.onopen=Z,isFinite(I)&&setTimeout(()=>n(),I)})}},L=class C extends Function{constructor(l,g,I,c=""){return super(),this[p]=g,this[u]=I,this.id=ig(),this.path=c,this.socket=l,new Proxy(this,{get:(i,t)=>t==="id"?this.id:t==="socket"?this.socket:new C(l,g,I,`${c}:${t}`),apply:async(i,t,e)=>{b&&console.log(`[SPapply] sending ${this.path.substring(1)} receiver ${this[p]} to ${this[u]}`);let o=await this.socket.upgraded.send(this.path.substring(1),e,this[u]===V?1/0:void 0);if(o instanceof w){let n=[...new Array(e.length)].map((B,Z)=>String.fromCharCode(97+Z)).join(",");throw b&&console.error(`ERROR calling [[${o.originName}]].${this.path.substring(1).replaceAll(":",".")}(${n}): ${o.message}`),new Error(o.message)}return o}})}};function N(C,l,g,I){return I=U.upgrade(I,g,C,l),I[f]=new L(I,C,l)}var a=!1,Q=Symbol();function T(C){return class x extends C{static get disallowedCalls(){let g=Object.getOwnPropertyNames(x.prototype);return["constructor","disconnect"].forEach(I=>g.splice(g.indexOf(I),1)),g}constructor(){super();let g=this[Q]={},I=new Proxy(g,{get:(c,i)=>g[i],set:()=>{throw new Error("cannot directly assign to state, use setState(update)")}});Object.defineProperty(this,"state",{value:I,writable:!1,configurable:!1}),this.onConnect||(this.onConnect=async()=>{a&&console.log(`[ClientBase] client ${this.state.id} connected.`)}),this.onDisconnect||(this.onDisconnect=async()=>{a&&console.log(`[ClientBase] client ${this.state.id} disconnected.`)}),this.onQuit||(this.onQuit=async()=>{a&&console.log(`[ClientBase] client ${this.state.id} quitting.`)})}setState(g){a&&console.log("[ClientBase] updating state");let I=this[Q];Object.entries(g).forEach(([c,i])=>I[c]=i)}connectServerSocket(g){a&&console.log("[ClientBase]  connected to server"),this.server=N(K,F,this,g),this.onConnect()}disconnect(){this.server.socket.close()}}}function E(C){return class j extends C{clients=[];ws=void 0;webserver=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(j.prototype);return g.splice(g.indexOf("constructor"),1),g}constructor(g,I){super(),this.ws=g,this.webserver=I}async connectClientSocket(g){a&&console.log("[ServerBase] client connecting to server...");let I=N(F,K,this,g);a&&console.log("[ServerBase] sending connection id"),I.socket.send(JSON.stringify({name:"handshake:setid",payload:{id:I.id}})),a&&console.log("[ServerBase] adding client to list of known clients"),this.clients.push(I),this.addDisconnectHandling(I,g),this.onConnect(I)}async addDisconnectHandling(g,I){let{clients:c}=this;I.on("close",()=>{let i=c.findIndex(t=>t===g);if(i!==-1){let t=c.splice(i,1)[0];this.onDisconnect(g)}})}async onDisconnect(g){if(super.onDisconnect)return super.onDisconnect(g);a&&console.log(`[ServerBase] client ${g.id} disconnected.`)}async onConnect(g){if(super.onConnect)return super.onConnect(g);a&&console.log(`[ServerBase] client ${g.id} connected.`)}async quit(){await this.onQuit(),this.clients.forEach(g=>g.disconnect()),this.webserver.close(),this.ws.close(),this.teardown()}async onQuit(){if(super.onQuit)return super.onQuit();a&&console.log("[ServerBase] told to quit.")}async teardown(){if(super.teardown)return super.teardown();a&&console.log("[ServerBase] post-quit teardown.")}}}import{createPatch as og}from"rfc6902";var r=!1;function P(C){return class O extends C{browser=void 0;constructor(){super(),this.onBrowserConnect||(this.onBrowserConnect=async g=>{r&&console.log("[WebClientBase] browser connected.")}),this.onBrowserDisconnect||(this.onBrowserDisconnect=async g=>{r&&console.log("[WebClientBase] browser disconnected.")})}static get disallowedCalls(){let g=Object.getOwnPropertyNames(O.prototype).concat(C.disallowedCalls);return["constructor","quit","syncState"].forEach(I=>g.splice(g.indexOf(I),1)),g}connectBrowserSocket(g){this.browser||(this.browser=N(z,V,this,g),this.browser.socket.__seq_num=0,this.setState(this.state),this.onBrowserConnect(this.browser))}disconnectBrowserSocket(){this.onBrowserDisconnect(this.browser),this.browser=void 0}setState(g){if(r&&console.log("[WebClientBase] setState"),super.setState(g),r&&console.log("[WebClientBase] client has browser?",!!this.browser),this.browser){r&&console.log("[WebClientBase] creating diff as part of setState");let I=og(this.__oldState??{},this.state);if(I.length>0){let c={state:I,seq_num:++this.browser.socket.__seq_num,diff:!0};r&&console.log("[WebClientBase] sending diff as part of setState:",c),this.browser.socket.send(JSON.stringify(c))}else r&&console.log("no difference, skipping state sync.")}this.__oldState=JSON.parse(JSON.stringify(this.state))}syncState(){if(this.browser){r&&console.log("[WebClientBase] running syncState (will respond with full state)");let g=JSON.parse(JSON.stringify(this.state));return this.browser.socket.__seq_num=0,r&&console.log("[WebClientBase] responding with full state:",g),g}throw new Error("[WebClientBase] Cannot sync state: no browser attached to client.")}quit(){this.browser&&(this.browser.socket.close(),this.disconnectBrowserSocket()),this.disconnect(),this.onQuit()}}}var R=class{constructor(l){this.owner=l,this.routes={}}addRouteHandler(l,...g){this.routes[l]=g}async handle(l,g,I){let c=this.routes[l];if(!c)return!1;for(let i=0,t=c.length;i<t;i++){let e=c[i],o=!0,n=()=>o=!1;try{await e(g,I,n)}catch(B){console.error(B),console.trace();break}if(o)break}return!0}};import ng from"node:fs";import{join as D}from"node:path";var M=atob("");var _={".html":"text/html",".css":"text/css",".js":"application/javascript",".jpg":"image/jpeg",".png":"image/png"},eg="text/plain";function $(C){let l=Object.keys(_).find(I=>C.slice(-I.length)===I);return _[l]||eg}function tg(C,l){return C==="/"?D(l,"index.html"):(C=C.substring(1),C=C.replaceAll("../","/").replace(/\/+/g,"/"),C=D(l,C),C)}function dg(C,l){console.error(`Can't serve ${C}, so it probably doesn't exist`),l.writeHead(404,{"Content-Type":"text/html"}),l.end("<doctype html><html><body>resource not found</body></html>")}function q(C,l){return async(g,I)=>{if(g.url.includes("?")){let[t,e]=g.url.split(/\\?\?/);g.url=t,g.params=new URLSearchParams(e)}let c=g.url;if(c==="/favicon.ico")return I.writeHead(200,{"Content-Type":"text/plain"}),I.end("","utf-8");if(c==="/socketless.js")return I.writeHead(200,{"Content-Type":$(".js")}),I.end(M,"utf-8");if(!await l.handle(c,g,I)){var i=tg(g.url,C);ng.readFile(i,(t,e)=>{if(t)return dg(i,I);I.writeHead(200,{"Content-Type":$(i)}),I.end(e,"utf-8")})}}}var sg=!0;function fg(C,l){C=T(C),l=E(l);let g=P(C),I={createServer:function(i){let t,e;i?.constructor===Object?e=i:t=i;let o=t;if(!o){let Z=new R(null),d=(G,m)=>{if(G.url.includes("?")){let[A,h]=G.url.split(/\\?\?/);G.url=A,G.params=new URLSearchParams(h)}Z.handle(G.url,G,m)};o=e?Ig.createServer(e,d):gg.createServer(d),o.addRoute=Z.addRouteHandler.bind(Z)}let n=new lg({noServer:!0});o.on("upgrade",(Z,d,G)=>{n.handleUpgrade(Z,d,G,m=>{n.emit("connection",m,Z)})});let B=new l(n,o);return n.on("connection",function(Z){B.connectClientSocket(Z)}),o},createClient:function(i,t,e=C){i=i.replace("http","ws");let o=new Zg(i,{rejectUnauthorized:!t}),n=new e;o.on("close",(...Z)=>n.onDisconnect(...Z));function B(Z){try{let{name:d,payload:G}=JSON.parse(Z);d==="handshake:setid"&&(o.off("message",B),n.setState(G),n.connectServerSocket(o))}catch{}}return o.on("message",B),n},createWebClient:function(i,t,e,o){let n=I.createClient(i,o,g),B=new R(n),Z=q(t,B),d=e?Ig.createServer(e,Z):gg.createServer(Z),G=new lg({noServer:!0});return d.on("upgrade",(m,A,h)=>{G.handleUpgrade(m,A,h,W=>{G.emit("connection",W,m)})}),n.ws=G,n.webserver=d,G.on("connection",m=>{n.connectBrowserSocket(m),m.on("message",async A=>{A=A.toString();let{name:h,payload:W,error:X}=JSON.parse(A);if(X)throw new Error(X);let S=v(h);if(h==="syncState"){let s=await n.syncState();return m.send(JSON.stringify({name:S,payload:s}))}if(h==="disconnect")return n.disconnect();if(h.endsWith(H))n.browser.socket.router(A,sg);else{let s=n.server,Y=h.split(":");for(;Y.length;)s=s[Y.shift()];let y=await s(...W);m.send(JSON.stringify({name:S,payload:y}))}}),m.on("close",()=>{n.disconnectBrowserSocket()})}),d.addRoute=B.addRouteHandler.bind(B),{client:n,clientWebServer:d}}};return I}export{fg as linkClasses};
