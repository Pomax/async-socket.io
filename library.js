import Ig from"node:http";import lg from"node:https";import{WebSocket as sg,WebSocketServer as cg}from"ws";import{WebSocket as og}from"ws";var k="server",J="client",Q="webclient",V="browser";var v=class{constructor(I,g){this.originName=I,this.message=g}},b=!1;function ig(){let C=Date.now().toString(16),I=(1e6*Math.random()|0).toString(16);return`${C}-${I}`}var F=":response",H=C=>`${C}${F}`,f=Symbol("origin"),U=Symbol("proxy"),X=Symbol("receiver"),y=Symbol("remote"),N=Symbol("handlers"),L=class C extends og{[f]=void 0;[U]=void 0;[X]="";[y]="";[N]={};constructor(){throw new Error("Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.")}static upgrade(I,g,l,c){if(I instanceof C)return I;Object.setPrototypeOf(I,C.prototype),I[f]=g,I[X]=l,I[y]=c,I[N]={};let o=I.router.bind(I);return I.on?I.on("message",o):I.onmessage=o,I}get upgraded(){return this.__upgraded||(this.__upgraded={on:(...I)=>this.__on(...I),off:(...I)=>this.__off(...I),send:(...I)=>this.__send(...I)}),this.__upgraded}async router(I,g=!1){let{[f]:l,[X]:c,[y]:o}=this;if(o===V&&!g)return;I.srcElement&&(I=I.data);let d;try{d=JSON.parse(I)}catch{return console.error(`Could not parse websocket data: ${I}`)}let{name:n,payload:i,error:e,diff:s,seq_num:Z}=d,{state:t}=d,G=e?new v(c,e):void 0;if(b&&console.log(`[${c}]/[${o}] router running given:`,{eventName:n,payload:i,errorMsg:e,state:t,diff:s,seq_num:Z}),t&&c===V){b&&console.log("handling state update in the browser",t),b&&console.log("origin object:",{origin:l});let B=JSON.parse(JSON.stringify(l.state));if(s){b&&console.log("received diff",t);let S=t,K;if(Z===l.__seq_num+1)l.__seq_num=Z,K=JSON.parse(JSON.stringify(B)),b&&console.log("applying patch to",K),rfc6902.applyPatch(K,S);else{b&&console.log("seq_num mismatch, syncing state");let Cg=await this.__send("syncState");l.__seq_num=0,K=Cg}t=K}return l.state=t,l.update?.(B)}if(n.endsWith(F)){let{[N]:B}=this;if(b&&console.log(`[${c}] response message received`),!B[n])throw new Error(`no handlers for ${n}`);B[n].forEach(S=>{S(G||i)});return}if(i&&!Array.isArray(i))throw new Error(`[${c}] received payload for ${n} from [${o}] but it was not an array? ${JSON.stringify(i,null,2)}`);let m=n.split(":");b&&console.log(`[${c}] router: stages:`,m);let a=l,[A]=m,p=l.__proto__?.constructor.disallowedCalls??[],r,u;if(A&&p.includes(A)&&(r=`Illegal call: ${A} is a protected property`),!r)try{for(;m.length;){let B=m.shift();b&&console.log(`checking ${B}`),a=a[B]}c==="server"&&i.unshift(this[U])}catch(B){b&&console.error(`cannot resolve ${n} on ${c}`,B),r=B.message}if(!r)try{u=await a.bind(l)(...i)??!0,c===J&&l.browser&&l.setState(l.state)}catch(B){b&&console.error(`function invocation for ${n} failed on ${c}, payload:`,i),b&&console.error(B),r=`Cannot call [[${c}]].${n.replaceAll(":",".")}, function is not defined.`}let Y=H(n);b&&console.log(`[${c}] sending ${Y}`,{payload:u,error:r}),super.send(JSON.stringify({name:Y,payload:u,error:r}))}__on(I,g){let{[N]:l}=this;return l[I]||(l[I]=[]),l[I].push(g),()=>this.__off(I,g)}__off(I,g){let{[N]:l}=this;if(!l[I])return;let c=l[I].indexOf(g);l[I].splice(c,1)}async __send(I,g={},l=1e3){let{[X]:c,[y]:o}=this;return b&&console.log(`[${c}] sending [${I}] to [${o}]:`,g),await new Promise((d,n)=>{let i=H(I),e=(t=void 0)=>{b&&console.log(`[${c}] cleanup`),this.__off(i,s),e=()=>{},d(t)},s=t=>e(t);this.__on(i,t=>{b&&console.log(`[${c}] handling response for ${I} from [${o}]:`),s(t)});let Z=()=>{b&&console.log(`(raw) sending ${I} from ${c} to ${o}`),super.send(JSON.stringify({name:I,payload:g}))};super.readyState===1?Z():super.onopen=Z,isFinite(l)&&setTimeout(()=>e(),l)})}},z=class C extends Function{constructor(I,g,l,c=""){return super(),this[X]=g,this[y]=l,this.id=ig(),this.path=c,this.socket=I,new Proxy(this,{get:(o,d)=>d==="id"?this.id:d==="socket"?this.socket:new C(I,g,l,`${c}:${d}`),apply:async(o,d,n)=>{b&&console.log(`[SPapply] sending ${this.path.substring(1)} receiver ${this[X]} to ${this[y]}`);let i=await this.socket.upgraded.send(this.path.substring(1),n,this[y]===V?1/0:void 0);if(i instanceof v){let e=[...new Array(n.length)].map((s,Z)=>String.fromCharCode(97+Z)).join(",");throw b&&console.error(`ERROR calling [[${i.originName}]].${this.path.substring(1).replaceAll(":",".")}(${e}): ${i.message}`),new Error(i.message)}return i}})}};function R(C,I,g,l){return l=L.upgrade(l,g,C,I),l[U]=new z(l,C,I)}var h=!1,x=Symbol();function j(C){return class T extends C{static get disallowedCalls(){let g=Object.getOwnPropertyNames(T.prototype);return["constructor","disconnect"].forEach(l=>g.splice(g.indexOf(l),1)),g.push("server","state"),g}constructor(){super();let g=this[x]={},l=new Proxy(g,{get:(c,o)=>g[o],set:()=>{throw new Error("cannot directly assign to state, use setState(update)")}});Object.defineProperty(this,"state",{value:l,writable:!1,configurable:!1})}onConnect(){super.onConnect?.(),h&&console.log(`[ClientBase] client ${this.state.id} connected.`)}onDisconnect(){super.onDisconnect?.(),h&&console.log(`[ClientBase] client ${this.state.id} disconnected.`)}setState(g){h&&console.log("[ClientBase] updating state");let l=this[x];Object.entries(g).forEach(([c,o])=>l[c]=o)}connectServerSocket(g){h&&console.log("[ClientBase]  connected to server"),this.server=R(J,k,this,g),this.onConnect()}disconnect(){this.server.socket.close()}}}function O(C){return class E extends C{clients=[];ws=void 0;webserver=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(E.prototype);return g.splice(g.indexOf("constructor"),1),g.push("clients","ws","webserver"),g}constructor(g,l){super(),this.ws=g,this.webserver=l}async connectClientSocket(g){h&&console.log("[ServerBase] client connecting to server...");let l=R(k,J,this,g);h&&console.log("[ServerBase] sending connection id"),l.socket.send(JSON.stringify({name:"handshake:setid",payload:{id:l.id}})),h&&console.log("[ServerBase] adding client to list of known clients"),this.clients.push(l),this.addDisconnectHandling(l,g),this.onConnect(l)}async addDisconnectHandling(g,l){let{clients:c}=this;l.on("close",()=>{let o=c.findIndex(d=>d===g);if(o!==-1){let d=c.splice(o,1)[0];this.onDisconnect(g)}})}async onDisconnect(g){super.onDisconnect?.(g),h&&console.log(`[ServerBase] client ${g.id} disconnected.`)}async onConnect(g){super.onConnect?.(g),h&&console.log(`[ServerBase] client ${g.id} connected.`)}async quit(){await this.onQuit(),this.clients.forEach(g=>g.disconnect()),this.ws.close(),this.webserver.closeAllConnections(),this.webserver.close(()=>this.teardown())}async onQuit(){super.onQuit?.(),h&&console.log("[ServerBase] told to quit.")}async teardown(){super.teardown?.(),h&&console.log("[ServerBase] post-quit teardown.")}}}import{createPatch as eg}from"rfc6902";var W=!1;function M(C){return class P extends C{browser=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(P.prototype).concat(C.disallowedCalls);return["constructor","quit","syncState"].forEach(l=>g.splice(g.indexOf(l),1)),g.push("browser","ws","webserver"),g}constructor(){super(),this.onBrowserConnect||(this.onBrowserConnect=async g=>{W&&console.log("[WebClientBase] browser connected.")}),this.onBrowserDisconnect||(this.onBrowserDisconnect=async g=>{W&&console.log("[WebClientBase] browser disconnected.")})}connectBrowserSocket(g){this.browser||(this.browser=R(Q,V,this,g),this.browser.socket.__seq_num=0,this.setState(this.state),this.onBrowserConnect(this.browser))}disconnectBrowserSocket(){this.onBrowserDisconnect(this.browser),this.browser=void 0}setState(g){if(W&&console.log("[WebClientBase] setState"),super.setState(g),W&&console.log("[WebClientBase] client has browser?",!!this.browser),this.browser){W&&console.log("[WebClientBase] creating diff as part of setState");let l=eg(this.__oldState??{},this.state);if(l.length>0){let c={state:l,seq_num:++this.browser.socket.__seq_num,diff:!0};W&&console.log("[WebClientBase] sending diff as part of setState:",c),this.browser.socket.send(JSON.stringify(c))}else W&&console.log("no difference, skipping state sync.")}this.__oldState=JSON.parse(JSON.stringify(this.state))}syncState(){if(this.browser){W&&console.log("[WebClientBase] running syncState (will respond with full state)");let g=JSON.parse(JSON.stringify(this.state));return this.browser.socket.__seq_num=0,W&&console.log("[WebClientBase] responding with full state:",g),g}throw new Error("[WebClientBase] Cannot sync state: no browser attached to client.")}async quit(){this.browser&&(this.browser.socket.close(),this.disconnectBrowserSocket()),this.disconnect(),await this.onQuit(),this.ws.close(),this.webserver.closeAllConnections(),this.webserver.close(()=>this.teardown())}async onQuit(){super.onQuit?.(),W&&console.log(`[WebClient] client ${this.id} told to quit.`)}async teardown(){super.teardown?.(),W&&console.log(`[WebClient] client ${this.id} running teardown.`)}}}var w=class{constructor(I){this.owner=I,this.routes={}}addRouteHandler(I,...g){this.routes[I]=g}removeRoute(I){delete this.routes[I]}async handle(I,g,l){let c=this.routes[I];if(!c)return!1;for(let o=0,d=c.length;o<d;o++){let n=c[o],i=!0,e=()=>i=!1;try{await n(g,l,e)}catch(s){console.error(s),console.trace();break}if(i)break}return!0}};import ng from"node:fs";import{join as _}from"node:path";var D=atob("");var $={".html":"text/html",".css":"text/css",".js":"application/javascript",".jpg":"image/jpeg",".png":"image/png"},tg="text/plain";function q(C){let I=Object.keys($).find(l=>C.slice(-l.length)===l);return $[I]||tg}function dg(C,I){return C==="/"?_(I,"index.html"):(C=C.substring(1),C=C.replaceAll("../","/").replace(/\/+/g,"/"),C=_(I,C),C)}function Zg(C,I){console.error(`Can't serve ${C}, so it probably doesn't exist`),I.writeHead(404,{"Content-Type":"text/html"}),I.end("<doctype html><html><body>resource not found</body></html>")}function gg(C,I){return async(g,l)=>{if(g.url.includes("?")){let[d,n]=g.url.split(/\\?\?/);g.url=d,g.params=new URLSearchParams(n)}let c=g.url;if(c==="/favicon.ico")return l.writeHead(200,{"Content-Type":"text/plain"}),l.end("","utf-8");if(c==="/socketless.js")return l.writeHead(200,{"Content-Type":q(".js")}),l.end(D,"utf-8");if(!await I.handle(c,g,l)){var o=dg(g.url,C);ng.readFile(o,(d,n)=>{if(d)return Zg(o,l);l.writeHead(200,{"Content-Type":q(o)}),l.end(n,"utf-8")})}}}var bg=!0,Gg=Symbol("allow self-signed certificates");function Lg(C,I){C=j(C),I=O(I);let g=M(C),l={createServer:function(o){let d,n;o?.constructor===Object?n=o:d=o;let i=d;if(!i){let Z=new w(null),t=(G,m)=>{if(G.url.includes("?")){let[a,A]=G.url.split(/\\?\?/);G.url=a,G.params=new URLSearchParams(A)}Z.handle(G.url,G,m)};i=n?lg.createServer(n,t):Ig.createServer(t),i.addRoute=Z.addRouteHandler.bind(Z),i.removeRoute=Z.removeRoute.bind(Z)}let e=new cg({noServer:!0});i.on("upgrade",(Z,t,G)=>{e.handleUpgrade(Z,t,G,m=>{e.emit("connection",m,Z)})});let s=new I(e,i);return e.on("connection",function(Z){s.connectClientSocket(Z)}),i},createClient:function(o,d,n=C){o=o.replace("http","ws");let i=new sg(o,{rejectUnauthorized:d!==Gg}),e=new n;i.on("close",(...Z)=>e.onDisconnect(...Z));function s(Z){try{let{name:t,payload:G}=JSON.parse(Z);t==="handshake:setid"&&(i.off("message",s),e.setState(G),e.connectServerSocket(i))}catch{}}return i.on("message",s),e},createWebClient:function(o,d,n,i){let e=l.createClient(o,i,g),s=new w(e),Z=gg(d,s),t=n?lg.createServer(n,Z):Ig.createServer(Z),G=new cg({noServer:!0});return t.on("upgrade",(m,a,A)=>{G.handleUpgrade(m,a,A,p=>{G.emit("connection",p,m)})}),e.ws=G,e.webserver=t,G.on("connection",m=>{e.connectBrowserSocket(m),m.on("message",async a=>{a=a.toString();let{name:A,payload:p,error:r}=JSON.parse(a);if(r)throw new Error(r);let u=H(A);if(A==="syncState"){let Y=await e.syncState();return m.send(JSON.stringify({name:u,payload:Y}))}if(A==="quit")return e.quit();if(A==="disconnect")return e.disconnect();if(A.endsWith(F))e.browser.socket.router(a,bg);else{let Y=e.server,B=A.split(":");for(;B.length;)Y=Y[B.shift()];let S=await Y(...p);m.send(JSON.stringify({name:u,payload:S}))}}),m.on("close",()=>{e.disconnectBrowserSocket()})}),t.addRoute=s.addRouteHandler.bind(s),t.removeRoute=s.removeRoute.bind(s),{client:e,clientWebServer:t}}};return l}export{Gg as ALLOW_SELF_SIGNED_CERTS,Lg as linkClasses};
