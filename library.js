import lg from"node:http";import cg from"node:https";import{WebSocket as bg,WebSocketServer as og}from"ws";import{WebSocket as eg}from"ws";var F="server",N="client",T="webclient",X="browser";var w=class{constructor(I,g){this.originName=I,this.message=g}},m=!1;function ng(){let C=Date.now().toString(16),I=(1e6*Math.random()|0).toString(16);return`${C}-${I}`}var k=":response",v=C=>`${C}${k}`,f=Symbol("origin"),L=Symbol("proxy"),p=Symbol("receiver"),u=Symbol("remote"),K=Symbol("handlers"),U=class C extends eg{[f]=void 0;[L]=void 0;[p]="";[u]="";[K]={};constructor(){throw new Error("Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.")}static upgrade(I,g,l,c){if(I instanceof C)return I;Object.setPrototypeOf(I,C.prototype),I[f]=g,I[p]=l,I[u]=c,I[K]={};let e=I.router.bind(I);return I.on?I.on("message",e):I.onmessage=e,I}get upgraded(){return this.__upgraded||(this.__upgraded={on:(...I)=>this.__on(...I),off:(...I)=>this.__off(...I),send:(...I)=>this.__send(...I)}),this.__upgraded}async router(I,g=!1){let{[f]:l,[p]:c,[u]:e}=this;if(e===X&&!g)return;I.srcElement&&(I=I.data);let d;try{d=JSON.parse(I)}catch{return console.error(`Could not parse websocket data: ${I}`)}let{name:s,payload:o,error:n,diff:Z,seq_num:t}=d,{state:i}=d,G=n?new w(c,n):void 0;if(m&&console.log(`[${c}]/[${e}] router running given:`,{eventName:s,payload:o,errorMsg:n,state:i,diff:Z,seq_num:t}),i&&c===X){m&&console.log("handling state update in the browser",i),m&&console.log("origin object:",{origin:l});let a=JSON.parse(JSON.stringify(l.state));if(Z){m&&console.log("received diff",i);let S=i,R;if(t===l.__seq_num+1)l.__seq_num=t,R=JSON.parse(JSON.stringify(a)),m&&console.log("applying patch to",R),rfc6902.applyPatch(R,S);else{m&&console.log("seq_num mismatch, syncing state");let Cg=await this.__send("syncState");l.__seq_num=0,R=Cg}i=R}return l.state=i,l.update?.(a)}if(s.endsWith(k)){let{[K]:a}=this;if(m&&console.log(`[${c}] response message received`),!a[s])throw new Error(`no handlers for ${s}`);a[s].forEach(S=>{S(G||o)});return}let b=s.split(":");m&&console.log(`[${c}] router: stages:`,b);let B=l,[h]=b,V=l.__proto__?.constructor.disallowedCalls??[],A,W;if(h&&V.includes(h)&&(A=`Illegal call: ${h} is a protected property`),!A)try{for(;b.length;){let a=b.shift();m&&console.log(`checking ${a}`),B=B[a]}c==="server"&&o.unshift(this[L])}catch(a){m&&console.error(`cannot resolve ${s} on ${c}`,a),A=a.message}if(!A)try{W=await B.bind(l)(...o)??!0,c===N&&l.browser&&l.setState(l.state)}catch(a){m&&console.error(`function invocation for ${s} failed on ${c}, payload:`,o),m&&console.error(a),A=`Cannot call [[${c}]].${s.replaceAll(":",".")}, function is not defined.`}let Y=v(s);m&&console.log(`[${c}] sending ${Y}`,{payload:W,error:A}),super.send(JSON.stringify({name:Y,payload:W,error:A}))}__on(I,g){let{[K]:l}=this;return l[I]||(l[I]=[]),l[I].push(g),()=>this.__off(I,g)}__off(I,g){let{[K]:l}=this;if(!l[I])return;let c=l[I].indexOf(g);l[I].splice(c,1)}async __send(I,g={},l=1e3){let{[p]:c,[u]:e}=this;return m&&console.log(`[${c}] sending [${I}] to [${e}]:`,g),await new Promise((d,s)=>{let o=v(I),n=(i=void 0)=>{m&&console.log(`[${c}] cleanup`),this.__off(o,Z),n=()=>{},d(i)},Z=i=>n(i);this.__on(o,i=>{m&&console.log(`[${c}] handling response for ${I} from [${e}]:`),Z(i)});let t=()=>{m&&console.log(`(raw) sending ${I} from ${c} to ${e}`),super.send(JSON.stringify({name:I,payload:g}))};super.readyState===1?t():super.onopen=t,isFinite(l)&&setTimeout(()=>n(),l)})}},z=class C extends Function{constructor(I,g,l,c=""){return super(),this[p]=g,this[u]=l,this.id=ng(),this.path=c,this.socket=I,new Proxy(this,{get:(e,d)=>d==="id"?this.id:d==="socket"?this.socket:new C(I,g,l,`${c}:${d}`),apply:async(e,d,s)=>{m&&console.log(`[SPapply] sending ${this.path.substring(1)} receiver ${this[p]} to ${this[u]}`);let o=await this.socket.upgraded.send(this.path.substring(1),s,this[u]===X?1/0:void 0);if(o instanceof w){let n=[...new Array(s.length)].map((Z,t)=>String.fromCharCode(97+t)).join(",");throw m&&console.error(`ERROR calling [[${o.originName}]].${this.path.substring(1).replaceAll(":",".")}(${n}): ${o.message}`),new Error(o.message)}return o}})}};function J(C,I,g,l){return l=U.upgrade(l,g,C,I),l[L]=new z(l,C,I)}var r=!1,j=Symbol();function E(C){return class Q extends C{static get disallowedCalls(){let g=Object.getOwnPropertyNames(Q.prototype);return["constructor","disconnect"].forEach(l=>g.splice(g.indexOf(l),1)),g.push("server","state","params"),g}constructor(){super();let g=this[j]={},l=new Proxy(g,{get:(c,e)=>g[e],set:()=>{throw new Error("cannot directly assign to state, use setState(update)")}});Object.defineProperty(this,"state",{value:l,writable:!1,configurable:!1})}async onError(g){super.onError?.(g),r&&console.log("[ClientBase] some kind of error occurred.")}onConnect(){super.onConnect?.(),r&&console.log(`[ClientBase] client ${this.state.id} connected.`)}onDisconnect(){super.onDisconnect?.(),r&&console.log(`[ClientBase] client ${this.state.id} disconnected.`)}setState(g){r&&console.log("[ClientBase] updating state");let l=this[j];Object.entries(g).forEach(([c,e])=>l[c]=e)}connectServerSocket(g){r&&console.log("[ClientBase]  connected to server"),this.server=J(N,F,this,g),this.onConnect()}disconnect(){this.server.socket.close()}}}function P(C){return class O extends C{clients=[];ws=void 0;webserver=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(O.prototype);return g.splice(g.indexOf("constructor"),1),g.push("clients","ws","webserver"),g}constructor(g,l){super(),this.ws=g,this.webserver=l}async connectClientSocket(g){r&&console.log("[ServerBase] client connecting to server...");let l=J(F,N,this,g);r&&console.log("[ServerBase] sending connection id"),l.socket.send(JSON.stringify({name:"handshake:setid",payload:{id:l.id}})),r&&console.log("[ServerBase] adding client to list of known clients"),this.clients.push(l),this.addDisconnectHandling(l,g),this.onConnect(l)}async addDisconnectHandling(g,l){let{clients:c}=this;l.on("close",()=>{let e=c.findIndex(d=>d===g);if(e!==-1){let d=c.splice(e,1)[0];this.onDisconnect(g)}})}async onError(g){super.onError?.(g),r&&console.log("[ServerBase] some kind of error occurred.")}async onConnect(g){super.onConnect?.(g),r&&console.log(`[ServerBase] client ${g.id} connected.`)}async onDisconnect(g){super.onDisconnect?.(g),r&&console.log(`[ServerBase] client ${g.id} disconnected.`)}async quit(){await this.onQuit(),this.clients.forEach(g=>g.disconnect()),this.ws.close(),this.webserver.closeAllConnections(),this.webserver.close(()=>this.teardown())}async onQuit(){super.onQuit?.(),r&&console.log("[ServerBase] told to quit.")}async teardown(){super.teardown?.(),r&&console.log("[ServerBase] post-quit teardown.")}}}import{createPatch as ig}from"rfc6902";var y=!1;function M(C){return class D extends C{browser=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(D.prototype).concat(C.disallowedCalls);return["constructor","quit","syncState"].forEach(l=>g.splice(g.indexOf(l),1)),g.push("browser","ws","webserver"),g}constructor(){super(),this.onBrowserConnect||(this.onBrowserConnect=async g=>{y&&console.log("[WebClientBase] browser connected.")}),this.onBrowserDisconnect||(this.onBrowserDisconnect=async g=>{y&&console.log("[WebClientBase] browser disconnected.")})}connectBrowserSocket(g){this.browser?g.close():(this.browser=J(T,X,this,g),this.browser.socket.__seq_num=0,this.setState(this.state),this.onBrowserConnect(this.browser))}disconnectBrowserSocket(){this.onBrowserDisconnect(this.browser),this.browser=void 0}setState(g){if(y&&console.log("[WebClientBase] setState"),super.setState(g),y&&console.log("[WebClientBase] client has browser?",!!this.browser),this.browser){y&&console.log("[WebClientBase] creating diff as part of setState");let l=ig(this.__oldState??{},this.state);if(l.length>0){let c={state:l,seq_num:++this.browser.socket.__seq_num,diff:!0};y&&console.log("[WebClientBase] sending diff as part of setState:",c),this.browser.socket.send(JSON.stringify(c))}else y&&console.log("no difference, skipping state sync.")}this.__oldState=JSON.parse(JSON.stringify(this.state))}syncState(){if(this.browser){y&&console.log("[WebClientBase] running syncState (will respond with full state)");let g=JSON.parse(JSON.stringify(this.state));return this.browser.socket.__seq_num=0,y&&console.log("[WebClientBase] responding with full state:",g),g}throw new Error("[WebClientBase] Cannot sync state: no browser attached to client.")}async quit(){this.browser&&(this.browser.socket.close(),this.disconnectBrowserSocket()),this.disconnect(),await this.onQuit(),this.ws.close(),this.webserver.closeAllConnections(),this.webserver.close(()=>this.teardown())}async onQuit(){super.onQuit?.(),y&&console.log(`[WebClient] client ${this.id} told to quit.`)}async teardown(){super.teardown?.(),y&&console.log(`[WebClient] client ${this.id} running teardown.`)}}}var H=class{constructor(I){this.owner=I,this.routes={}}addRouteHandler(I,...g){this.routes[I]=g}removeRoute(I){delete this.routes[I]}async handle(I,g,l){let c=this.routes[I];if(!c)return!1;for(let e=0,d=c.length;e<d;e++){let s=c[e],o=!0,n=()=>o=!1;try{await s(g,l,n)}catch(Z){console.error(Z),console.trace();break}if(o)break}return!0}};import sg from"node:fs";import{join as $}from"node:path";var _=atob("LyoqCiAqIFRoaXMgZmlsZSBob3VzZXMgdGhlIGNvcmUgb2YgdGhlIFJQQyBmdW5jdGlvbmFsaXR5LgogKgogKiBUaGUgYFVwZ3JhZGVkU29ja2V0YCBjbGFzcyBpcyBhbiBleHRlbnNpb24gb24gdGhlIFdlYlNvY2tldCBjbGFzcyB0aGF0IGFkZHMKICogY3VzdG9tIG9uL29mZi9zZW5kIG1ldGhvZHMgKGV4cG9zZWQgdGhyb3VnaCBhIHNvY2tldC51cGdyYWRlZCBvYmplY3QpLCBzZXQKICogdXAgdG8gaGFuZGxlIGF1dG9tYXRpYyByZXNwb25zZXMgdG8gY2FsbHMuIEluY29taW5nIFdlYlNvY2tldCBtZXNzYWdlcyBhcmUKICogcm91dGVkIGludG8gdGhlIGByb3V0ZXJgIGZ1bmN0aW9uLCB3aGljaCBoYXMgYmVoYXZpb3VyIHRhaWxvcmVkIHRvIHNwZWNpZmljCiAqIG9yaWdpbnMsIGFuZCBtYWtlcyBzdXJlIHRoYXQgbWVzc2FnZXMgYXJlIGFsd2F5cyByZXNwb25kZWQgdG8uCiAqCiAqIFRoZSBgX19zZW5kYCBmdW5jdGlvbiwgaW4gdHVybiwgZG9lc24ndCBqdXN0IHNlbmQgZGF0YSBvdmVyIHRvIGEgcmVtb3RlLCBidXQKICogYWxzbyB3YWl0cyBmb3IgdGhhdCByZW1vdGUncyA6cmVzcG9uc2UgbWVzc2FnZSwgdXNpbmcgUHJvbWlzZXMgdG8gbWFrZQogKiBzdXJlIHRoYXQgYW55b25lIGNhbiBgYXdhaXQgc29ja2V0LnVwZ3JhZGVkLnNlbmQoLi4uKWAgYW5kIGdldCBhIHJlc3BvbnNlCiAqIG9uY2UgdGhhdCByZXNwb25zZSBoYXMgYmVlbiBzZW50IGJhY2suIEFzIGZhciBhcyBjYWxsaW5nIGNvZGUgaXMgY29uY2VybmVkLAogKiB0aGlzIGlzIGEgbm9ybWFsIGFzeW5jIGNhbGwsIGFuZCB0aGUgZmFjdCB0aGF0IG5ldHdvcmsgdHJhbnNwb3J0IGhhcHBlbmVkCiAqIGlzIGVudGlyZWx5IGlycmVsZXZhbnQuIENhbGxlcnMgc2hvdWxkIG5vdCBjYXJlLgogKgogKiBUaGUgYFNvY2tldFByb3h5YCBpcyBhIGNsZXZlciBsaXR0bGUgUHJveHkgb2JqZWN0IHRoYXQgZXh0ZW5kcyB0aGUgRnVuY3Rpb24KICogYnVpbHQtaW4sIHdoaWNoIGFsbG93cyB1cyB0byBjcmVhdGUgYSByZWN1cnNpdmUgb2JqZWN0IHdoZXJlIGFueSBwcm9wZXJ0eQogKiBvbiBpdCBpcyBhIHZhbGlkIGZ1bmN0aW9uIHRvIGNhbGwsIGFuZCBkb2luZyBzbyB3aWxsIHNlbmQgdGhlIGNvcnJlc3BvbmRpbmcKICogY2FsbCBjaGFpbiBvdmVyIHRvIHRoZSByZW1vdGUgZm9yIGV4ZWN1dGlvbiBhbmQgcmVzcG9uc2UgbWVzc2FnaW5nLiBUaGlzIHdheSwKICogd2UgZG9uJ3QgbmVlZCB0byBwZXJmb3JtIGFueSAid2hpY2ggZnVuY3Rpb25zIGFyZSBzdXBwb3J0ZWQiLCB3ZSBjYW4ganVzdCBwcm94eQogKiB0aGUgY2FsbCBvdmVyIHRoZSBuZXR3b3JrLCBpZiBpdCBleGlzdHMsIGl0IHJ1bnMsIGlmIGl0IGRvZXNuJ3QsIHRoZW4gd2UnbGwKICogZ2V0IGEgcmVzdWx0IGJhY2sgd2l0aCBhbiBgZXJyb3JgIG1lc3NhZ2UgdGhhdCB3ZSBjYW4gdHVybiBpbnRvIGEgbG9jYWwgdGhyb3cuCiAqLwoKCmNvbnN0IEJST1dTRVIgPSAiYnJvd3NlciI7CmNvbnN0IENMSUVOVCA9ICJjbGllbnQiOwoKY2xhc3MgUlBDRXJyb3IgewogIGNvbnN0cnVjdG9yKG9yaWdpbk5hbWUsIG1lc3NhZ2UpIHsKICAgIHRoaXMub3JpZ2luTmFtZSA9IG9yaWdpbk5hbWU7CiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogIH0KfQoKY29uc3QgREVCVUcgPSBmYWxzZTsKCi8vIGltcG9ydGluZyB0aGUgdXVpZCBwYWNrYWdlIGlzIHdheSB0b28gZXhwZW5zaXZlIGZvciB3aGF0IHdlIG5lZWQgaGVyZQpmdW5jdGlvbiB1dWlkKCkgewogIGNvbnN0IG5vdyA9IERhdGUubm93KCkudG9TdHJpbmcoMTYpOwogIGNvbnN0IHJkbSA9ICgoMWU2ICogTWF0aC5yYW5kb20oKSkgfCAwKS50b1N0cmluZygxNik7CiAgcmV0dXJuIGAke25vd30tJHtyZG19YDsKfQoKLy8gcmVzcG9uc2VzIHNob3VsZCBhbHdheXMgYmUgInRoZSBldmVudCBuYW1lLCB3aXRoIDpyZXNwb25zZSBhZGRlZCIKZXhwb3J0IGNvbnN0IFJFU1BPTlNFX1NVRkZJWCA9IGA6cmVzcG9uc2VgOwpleHBvcnQgY29uc3QgZ2V0UmVzcG9uc2VOYW1lID0gKGV2ZW50TmFtZSkgPT4gYCR7ZXZlbnROYW1lfSR7UkVTUE9OU0VfU1VGRklYfWA7CgovLyB1c2Ugc3ltYm9scyBzbyB3ZSBkb24ndCBwb2xsdXRlIHRoZSBzb2NrZXQgcHJvdG90eXBlCmNvbnN0IE9SSUdJTiA9IFN5bWJvbChgb3JpZ2luYCk7CmNvbnN0IFBST1hZID0gU3ltYm9sKGBwcm94eWApOwpjb25zdCBSRUNFSVZFUiA9IFN5bWJvbChgcmVjZWl2ZXJgKTsKY29uc3QgUkVNT1RFID0gU3ltYm9sKGByZW1vdGVgKTsKY29uc3QgSEFORExFUlMgPSBTeW1ib2woYGhhbmRsZXJzYCk7CgovKioKICogLi4uZG8gZG9jcyBnbyBoZXJlPwogKi8KY2xhc3MgVXBncmFkZWRTb2NrZXQgZXh0ZW5kcyBXZWJTb2NrZXQgewogIFtPUklHSU5dID0gdW5kZWZpbmVkOyAvLyB0aGUgc29ja2V0IG93bmVyIHdobyBpbnZva2VkIHRoZSB1cGdyYWRlLiBTZWUgdXBncmFkZSgpCiAgW1BST1hZXSA9IHVuZGVmaW5lZDsgLy8gdGhlIHByb3h5IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBzb2NrZXQKICBbUkVDRUlWRVJdID0gYGA7IC8vIG5hbWUgb2YgdGhlIHJlY2VpdmluZyBvYmplY3QKICBbUkVNT1RFXSA9IGBgOyAvLyBuYW1lIG9mIHRoZSByZW1vdGUgb2JqZWN0CiAgW0hBTkRMRVJTXSA9IHt9OyAvLyB0aGUgbGlzdCBvZiBldmVudCBoYW5kbGVycy4gU2VlIHVwZ3JhZGUoKQoKICAvLyBleHBsaWNpdGx5IGZvcmJpZCB0aGUgY29uc3RydWN0b3IgZnJvbSBiZWluZyB1c2VkLgogIC8vIEB0cy1pZ25vcmU6IHdlIGRvbid0IG5lZWQgdG8gY2FsbCBzdXBlcigpIGlmIHdlIGVycm9yIG91dC4KICBjb25zdHJ1Y3RvcigpIHsKICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgIkNhbm5vdCBjcmVhdGUgVXBncmFkZWRTb2NrZXQgaW5zdGFuY2VzLiBVc2UgVXBncmFkZWRTb2NrZXQudXBncmFkZShuYW1lLCBvcmlnaW4sIHNvY2tldCkgaW5zdGVhZC4iLAogICAgKTsKICB9CgogIC8vIHVwZ3JhZGUgYSBzb2NrZXQgZnJvbSBwbGFpbiBXZWJTb2NrZXQgdG8gdGhpcyBjbGFzcyBpbnN0ZWFkLgogIHN0YXRpYyB1cGdyYWRlKHNvY2tldCwgb3JpZ2luLCByZWNlaXZlciwgcmVtb3RlKSB7CiAgICBpZiAoc29ja2V0IGluc3RhbmNlb2YgVXBncmFkZWRTb2NrZXQpIHJldHVybiBzb2NrZXQ7CiAgICAvLyB1cGRhdGUgdGhlIHByb3RvdHlwZSBiaW5kaW5nCiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc29ja2V0LCBVcGdyYWRlZFNvY2tldC5wcm90b3R5cGUpOwogICAgLy8gbWFrZSBzdXJlIHRoYXQgbWVzc2FnZXMgZ28gdGhyb3VnaCB0aGUgcm91dGVyOgogICAgc29ja2V0W09SSUdJTl0gPSBvcmlnaW47CiAgICBzb2NrZXRbUkVDRUlWRVJdID0gcmVjZWl2ZXI7CiAgICBzb2NrZXRbUkVNT1RFXSA9IHJlbW90ZTsKICAgIHNvY2tldFtIQU5ETEVSU10gPSB7fTsKICAgIGNvbnN0IG1lc3NhZ2VSb3V0ZXIgPSBzb2NrZXQucm91dGVyLmJpbmQoc29ja2V0KTsKICAgIGlmIChzb2NrZXQub24pIHsKICAgICAgc29ja2V0Lm9uKGBtZXNzYWdlYCwgbWVzc2FnZVJvdXRlcik7CiAgICB9IGVsc2UgewogICAgICBzb2NrZXQub25tZXNzYWdlID0gbWVzc2FnZVJvdXRlcjsKICAgIH0KCiAgICAvLyBjb252ZW5pZW5jZSByZXR1cm4uCiAgICByZXR1cm4gc29ja2V0OwogIH0KCiAgLy8gU3BlY2lhbCBhY2Nlc3NvciBmb3IgdXBncmFkZWQgc29ja2V0IGZ1bmN0aW9ucywKICBnZXQgdXBncmFkZWQoKSB7CiAgICBpZiAoIXRoaXMuX191cGdyYWRlZCkgewogICAgICB0aGlzLl9fdXBncmFkZWQgPSB7CiAgICAgICAgb246ICguLi5hcmdzKSA9PiB0aGlzLl9fb24oLi4uYXJncyksCiAgICAgICAgb2ZmOiAoLi4uYXJncykgPT4gdGhpcy5fX29mZiguLi5hcmdzKSwKICAgICAgICBzZW5kOiAoLi4uYXJncykgPT4gdGhpcy5fX3NlbmQoLi4uYXJncyksCiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gdGhpcy5fX3VwZ3JhZGVkOwogIH0KCiAgLy8gbWVzc2FnZSByb3V0ZXIgc3BlY2lmaWNhbGx5IGZvciB0aGUgbWVzc2FnZSBmb3JtYXQgdXNlZCBieSB0aGUgc29ja2V0bGVzcyBjb2RlLgogIGFzeW5jIHJvdXRlcihtZXNzYWdlLCBmb3JjZWQgPSBmYWxzZSkgewogICAgY29uc3QgeyBbT1JJR0lOXTogb3JpZ2luLCBbUkVDRUlWRVJdOiByZWNlaXZlciwgW1JFTU9URV06IHJlbW90ZSB9ID0gdGhpczsKCiAgICAvLyBBbnkgY2FsbHMgZnJvbSB0aGUgYnJvd3NlciB0byB0aGUgd2ViY2xpZW50IGFyZSB0aGF0J3MgYWxyZWFkeSBoYW5kbGVkCiAgICAvLyBieSB0aGUgd2Vic29ja2V0IGRpcmVjdGx5IChzZWUgdGhlIGNyZWF0ZVdlYkNsaWVudCBmdW5jdGlvbiBpbiBpbmRleC5qcywKICAgIC8vIGluIHRoZSB3cy5vbihgY29ubmVjdGlvbmAsIC4uLikgYmxvY2spLCBzbyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBub3QKICAgIC8vIHRyeSB0byAiZG91YmxlLWhhbmRsZSIgdGhhdDoKICAgIGlmIChyZW1vdGUgPT09IEJST1dTRVIgJiYgIWZvcmNlZCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gYnJvd3NlciB3ZWJzb2NrZXQ/IElmIHNvLCB1bndyYXAgdGhlIGRhdGEKICAgIGlmIChtZXNzYWdlLnNyY0VsZW1lbnQpIHsKICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UuZGF0YTsKICAgIH0KCiAgICBsZXQgZGF0YTsKCiAgICB0cnkgewogICAgICBkYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBwYXJzZSB3ZWJzb2NrZXQgZGF0YTogJHttZXNzYWdlfWApOwogICAgfQoKICAgIGNvbnN0IHsgbmFtZTogZXZlbnROYW1lLCBwYXlsb2FkLCBlcnJvcjogZXJyb3JNc2csIGRpZmYsIHNlcV9udW0gfSA9IGRhdGE7CiAgICBsZXQgeyBzdGF0ZSB9ID0gZGF0YTsKICAgIGxldCB0aHJvd2FibGUgPSBlcnJvck1zZyA/IG5ldyBSUENFcnJvcihyZWNlaXZlciwgZXJyb3JNc2cpIDogdW5kZWZpbmVkOwoKICAgIGlmIChERUJVRykKICAgICAgY29uc29sZS5sb2coYFske3JlY2VpdmVyfV0vWyR7cmVtb3RlfV0gcm91dGVyIHJ1bm5pbmcgZ2l2ZW46YCwgewogICAgICAgIGV2ZW50TmFtZSwKICAgICAgICBwYXlsb2FkLAogICAgICAgIGVycm9yTXNnLAogICAgICAgIHN0YXRlLAogICAgICAgIGRpZmYsCiAgICAgICAgc2VxX251bSwKICAgICAgfSk7CgogICAgLy8gQ2xpZW50LXN0YXRlIHN5bmNocm9uaXphdGlvbiBtZWNoYW5pc20gZm9yIHRoZSBicm93c2VyOgogICAgaWYgKHN0YXRlICYmIHJlY2VpdmVyID09PSBCUk9XU0VSKSB7CiAgICAgIGlmIChERUJVRykgY29uc29sZS5sb2coYGhhbmRsaW5nIHN0YXRlIHVwZGF0ZSBpbiB0aGUgYnJvd3NlcmAsIHN0YXRlKTsKICAgICAgaWYgKERFQlVHKSBjb25zb2xlLmxvZyhgb3JpZ2luIG9iamVjdDpgLCB7IG9yaWdpbiB9KTsKICAgICAgY29uc3QgcHJldlN0YXRlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvcmlnaW4uc3RhdGUpKTsKICAgICAgaWYgKGRpZmYpIHsKICAgICAgICBpZiAoREVCVUcpIGNvbnNvbGUubG9nKGByZWNlaXZlZCBkaWZmYCwgc3RhdGUpOwogICAgICAgIGNvbnN0IHBhdGNoID0gc3RhdGU7CiAgICAgICAgbGV0IHRhcmdldDsKICAgICAgICAvLyB2ZXJpZnkgd2UncmUgc3RpbGwgaW4gc3luYyBieSBjb21wYXJpbmcgbWVzc2FnaW5nIHNlcXVlbmNlIG51bWJlcnMKICAgICAgICBpZiAoc2VxX251bSA9PT0gb3JpZ2luLl9fc2VxX251bSArIDEpIHsKICAgICAgICAgIG9yaWdpbi5fX3NlcV9udW0gPSBzZXFfbnVtOwogICAgICAgICAgdGFyZ2V0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwcmV2U3RhdGUpKTsKICAgICAgICAgIGlmIChERUJVRykgY29uc29sZS5sb2coYGFwcGx5aW5nIHBhdGNoIHRvYCwgdGFyZ2V0KTsKICAgICAgICAgIC8vIEB0cy1pZ25vcmU6IHRoaXMgb25seSBydW5zIGluIHRoZSBicm93c2VyLCB3aGVyZSByZmM2OTAyIGlzIGEgZ2xvYmFsLgogICAgICAgICAgcmZjNjkwMi5hcHBseVBhdGNoKHRhcmdldCwgcGF0Y2gpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgd2UncmUgbm90IGluIHN5bmMsIGFuZCB3ZSBuZWVkIHRvIHJlcXVlc3QgYSBmdWxsCiAgICAgICAgICAvLyBzdGF0ZSBvYmplY3QgaW5zdGVhZCBvZiB0cnlpbmcgdG8gYXBwbHkgZGlmZmVyZW50aWFsIHVwZGF0ZXMuCiAgICAgICAgICBpZiAoREVCVUcpIGNvbnNvbGUubG9nKGBzZXFfbnVtIG1pc21hdGNoLCBzeW5jaW5nIHN0YXRlYCk7CiAgICAgICAgICBjb25zdCBmdWxsU3RhdGUgPSBhd2FpdCB0aGlzLl9fc2VuZChgc3luY1N0YXRlYCk7CiAgICAgICAgICBvcmlnaW4uX19zZXFfbnVtID0gMDsKICAgICAgICAgIHRhcmdldCA9IGZ1bGxTdGF0ZTsKICAgICAgICB9CiAgICAgICAgc3RhdGUgPSB0YXJnZXQ7CiAgICAgIH0KICAgICAgLy8gUnVuIHRoZSB1cGRhdGUgd2l0aCB0aGUgbmV3IHN0YXRlIGFzIGFyZ3VtZW50IGZpcnN0LCB0aGVuCiAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgb2xkIHN0YXRlIHdpdGggdGhlIG5ldyBzdGF0ZSBhZnRlciB0aGUgdXBkYXRlLgogICAgICBvcmlnaW4uc3RhdGUgPSBzdGF0ZTsKICAgICAgcmV0dXJuIG9yaWdpbi51cGRhdGU/LihwcmV2U3RhdGUpOwogICAgfQoKICAgIC8vIElmIHRoaXMgaXMgYSByZXNwb25zZSBtZXNzYWdlLCBydW4gdGhlIGBvbmAgaGFuZGxlciBmb3IgdGhhdC4KICAgIGlmIChldmVudE5hbWUuZW5kc1dpdGgoUkVTUE9OU0VfU1VGRklYKSkgewogICAgICBjb25zdCB7IFtIQU5ETEVSU106IGhhbmRsZXJzIH0gPSB0aGlzOwogICAgICBpZiAoREVCVUcpIGNvbnNvbGUubG9nKGBbJHtyZWNlaXZlcn1dIHJlc3BvbnNlIG1lc3NhZ2UgcmVjZWl2ZWRgKTsKICAgICAgaWYgKCFoYW5kbGVyc1tldmVudE5hbWVdKSB0aHJvdyBuZXcgRXJyb3IoYG5vIGhhbmRsZXJzIGZvciAke2V2ZW50TmFtZX1gKTsKICAgICAgaGFuZGxlcnNbZXZlbnROYW1lXS5mb3JFYWNoKChoYW5kbGVyKSA9PiB7CiAgICAgICAgaGFuZGxlcih0aHJvd2FibGUgPyB0aHJvd2FibGUgOiBwYXlsb2FkKTsKICAgICAgfSk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBJZiBpdCdzIGEgcmVxdWVzdCBtZXNzYWdlLCByZXNvbHZlIGl0IHRvIGEgZnVuY3Rpb24gY2FsbCBhbmQgInJldHVybiIKICAgIC8vIHRoZSB2YWx1ZSBieSBzZW5kaW5nIGEgOnJlc3BvbnNlIG1lc3NhZ2Ugb3ZlciB0aGUgd2Vic29ja2V0IGluc3RlYWQuCiAgICBjb25zdCBzdGFnZXMgPSBldmVudE5hbWUuc3BsaXQoYDpgKTsKICAgIGlmIChERUJVRykgY29uc29sZS5sb2coYFske3JlY2VpdmVyfV0gcm91dGVyOiBzdGFnZXM6YCwgc3RhZ2VzKTsKCiAgICBsZXQgY2FsbGFibGUgPSBvcmlnaW47CiAgICBjb25zdCBbZmlyc3RdID0gc3RhZ2VzOwogICAgbGV0IGZvcmJpZGRlbiA9IG9yaWdpbi5fX3Byb3RvX18/LmNvbnN0cnVjdG9yLmRpc2FsbG93ZWRDYWxscyA/PyBbXTsKCiAgICBsZXQgZXJyb3IgPSB1bmRlZmluZWQ7CiAgICBsZXQgcmVzcG9uc2UgPSB1bmRlZmluZWQ7CgogICAgLy8gQXJlIHdlIGV2ZW4gYWxsb3dlZCB0byByZXNvbHZlIHRoaXMgY2hhaW4/CiAgICBpZiAoZmlyc3QgJiYgZm9yYmlkZGVuLmluY2x1ZGVzKGZpcnN0KSkgewogICAgICBlcnJvciA9IGBJbGxlZ2FsIGNhbGw6ICR7Zmlyc3R9IGlzIGEgcHJvdGVjdGVkIHByb3BlcnR5YDsKICAgIH0KCiAgICAvLyBXZSBhcmU6IGZpbmQgdGhlIGFjdHVhbCBmdW5jdGlvbiB0byBjYWxsLgogICAgaWYgKCFlcnJvcikgewogICAgICB0cnkgewogICAgICAgIHdoaWxlIChzdGFnZXMubGVuZ3RoKSB7CiAgICAgICAgICBjb25zdCBzdGFnZSA9IHN0YWdlcy5zaGlmdCgpOwogICAgICAgICAgaWYgKERFQlVHKSBjb25zb2xlLmxvZyhgY2hlY2tpbmcgJHtzdGFnZX1gKTsKICAgICAgICAgIGNhbGxhYmxlID0gY2FsbGFibGVbc3RhZ2VdOwogICAgICAgIH0KICAgICAgICAvLyBJZiB0aGlzIGNvZGUgcnVucyBvbiB0aGUgc2VydmVyLCB0aGUgZnVuY3Rpb24gbmVlZHMgdG8gYmUKICAgICAgICAvLyBjYWxsZWQgd2l0aCB0aGUgY2xpZW50IHByb3h5IGFzIGZpcnN0IGFyZ3VtZW50LgogICAgICAgIGlmIChyZWNlaXZlciA9PT0gYHNlcnZlcmApIHBheWxvYWQudW5zaGlmdCh0aGlzW1BST1hZXSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAvLyAiZnVuY3Rpb24gbm90IGZvdW5kIiBkb2Vzbid0IGNvdW50IGFzIGVycm9yICJoZXJlIi4KICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzZW5kIHRoYXQgYmFjayB0byB0aGUgY2FsbGVyLgogICAgICAgIGlmIChERUJVRykKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYGNhbm5vdCByZXNvbHZlICR7ZXZlbnROYW1lfSBvbiAke3JlY2VpdmVyfWAsIGUpOwogICAgICAgIGVycm9yID0gZS5tZXNzYWdlOwogICAgICB9CiAgICB9CgogICAgLy8gUmVzb2x2ZSB0aGUgZnVuY3Rpb24gYW5kIHRoZW4gc2VuZCB0aGUgcmVzdWx0IGFzIDpyZXNwb25zZSwgbWFraW5nCiAgICAvLyBzdXJlIHRvIHRha2UgaW50byBhY2NvdW50IHRoYXQgYSBjYWxsIGl0c2VsZiBtaWdodCB0aHJvdy4KICAgIGlmICghZXJyb3IpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXNwb25zZSA9IChhd2FpdCBjYWxsYWJsZS5iaW5kKG9yaWdpbikoLi4ucGF5bG9hZCkpID8/IHRydWU7CiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHdlYmNsaWVudCwgYW5kIHRoZXJlIGlzIGEgYnJvd3NlciBjb25uZWN0ZWQsCiAgICAgICAgLy8gYWxzbyBtYWtlIHN1cmUgdG8gdHJpZ2dlciBhIHN0YXRlIHN5bmMsIHNvIHRoYXQgY2xpZW50IGNvZGUKICAgICAgICAvLyBkb2VzIG5vdCBuZWVkIHRvIGluY2x1ZGUgc2V0U3RhdGUgY2FsbHMgYWxsIG92ZXIgdGhlIHBsYWNlLgogICAgICAgIGlmIChyZWNlaXZlciA9PT0gQ0xJRU5UICYmIG9yaWdpbi5icm93c2VyKSB7CiAgICAgICAgICBvcmlnaW4uc2V0U3RhdGUob3JpZ2luLnN0YXRlKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoREVCVUcpCiAgICAgICAgICBjb25zb2xlLmVycm9yKAogICAgICAgICAgICBgZnVuY3Rpb24gaW52b2NhdGlvbiBmb3IgJHtldmVudE5hbWV9IGZhaWxlZCBvbiAke3JlY2VpdmVyfSwgcGF5bG9hZDpgLAogICAgICAgICAgICBwYXlsb2FkLAogICAgICAgICAgKTsKICAgICAgICBpZiAoREVCVUcpIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgZXJyb3IgPSBgQ2Fubm90IGNhbGwgW1ske3JlY2VpdmVyfV1dLiR7ZXZlbnROYW1lLnJlcGxhY2VBbGwoCiAgICAgICAgICBgOmAsCiAgICAgICAgICBgLmAsCiAgICAgICAgKX0sIGZ1bmN0aW9uIGlzIG5vdCBkZWZpbmVkLmA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBTZW5kIG9mZiBhIHJlc3BvbnNlIG1lc3NhZ2Ugd2l0aCBlaXRoZXIgdGhlIHJlc3VsdCwgb3IgdGhlIGVycm9yLgogICAgY29uc3QgcmVzcG9uc2VOYW1lID0gZ2V0UmVzcG9uc2VOYW1lKGV2ZW50TmFtZSk7CiAgICBpZiAoREVCVUcpCiAgICAgIGNvbnNvbGUubG9nKGBbJHtyZWNlaXZlcn1dIHNlbmRpbmcgJHtyZXNwb25zZU5hbWV9YCwgewogICAgICAgIHBheWxvYWQ6IHJlc3BvbnNlLAogICAgICAgIGVycm9yLAogICAgICB9KTsKICAgIHN1cGVyLnNlbmQoCiAgICAgIEpTT04uc3RyaW5naWZ5KHsgbmFtZTogcmVzcG9uc2VOYW1lLCBwYXlsb2FkOiByZXNwb25zZSwgZXJyb3IgfSksCiAgICApOwogIH0KCiAgLyoqCiAgICogdGhpcy51cGdyYWRlZC5vbigpIG1hZGUgdG8gd29yayBsaWtlIC5hZGRFdmVudExpc3RlbmVyKCkKICAgKi8KICBfX29uKGV2ZW50TmFtZSwgaGFuZGxlcikgewogICAgY29uc3QgeyBbSEFORExFUlNdOiBoYW5kbGVycyB9ID0gdGhpczsKICAgIGlmICghaGFuZGxlcnNbZXZlbnROYW1lXSkgaGFuZGxlcnNbZXZlbnROYW1lXSA9IFtdOwogICAgaGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGhhbmRsZXIpOwogICAgLy8gcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nICJvZmYiIGZ1bmN0aW9uLCBmb3IgY29udmVuaWVuY2UuCiAgICByZXR1cm4gKCkgPT4gdGhpcy5fX29mZihldmVudE5hbWUsIGhhbmRsZXIpOwogIH0KCiAgLyoqCiAgICogdGhpcy51cGdyYWRlZC5vZmYoKSBtYWRlIHRvIHdvcmsgbGlrZSAucmVtb3ZlRXZlbnRMaXN0ZW5lcigpCiAgICovCiAgX19vZmYoZXZlbnROYW1lLCBoYW5kbGVyKSB7CiAgICBjb25zdCB7IFtIQU5ETEVSU106IGhhbmRsZXJzIH0gPSB0aGlzOwogICAgaWYgKCFoYW5kbGVyc1tldmVudE5hbWVdKSByZXR1cm47CiAgICBjb25zdCBwb3MgPSBoYW5kbGVyc1tldmVudE5hbWVdLmluZGV4T2YoaGFuZGxlcik7CiAgICBoYW5kbGVyc1tldmVudE5hbWVdLnNwbGljZShwb3MsIDEpOwogIH0KCiAgLyoqCiAgICogQWRkIGEgcHJvbWlzZS1iYXNlZCBlbWl0L3JlY2VpdmUgdG8gdGhlIHNvY2tldCwgc28gdGhhdCBjYWxsaW5nIGNvZGUgY2FuIGBhd2FpdGAgdGhlIHJlc3BvbnNlLgogICAqCiAgICogTm90ZSB0aGF0IHRoZXJlIGlzIGFuIG9wdGlvbmFsIHRoaXJkIGFyZ3VtZW50IGB0aW1lb3V0YCB0aGF0IGNhbiBiZSB1c2VkIHRvIHNheSBob3cgbG9uZyB0aGUKICAgKiBlbWl0IHNob3VsZCB3YWl0IGJlZm9yZSBkZWNpZGluZyB0aGVyZSBpcyBubyByZXNwb25zZSBmb3J0aGNvbWluZyBhbmQgdG8gY2xlYW4gdXAgdGhlIGV2ZW50CiAgICogbGlzdGVuZXIgZm9yIHRoYXQgcmVzcG9uc2UuIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgMTAwMG1zLgogICAqLwogIGFzeW5jIF9fc2VuZChldmVudE5hbWUsIGRhdGEgPSB7fSwgdGltZW91dCA9IDEwMDApIHsKICAgIGNvbnN0IHsgW1JFQ0VJVkVSXTogcmVjZWl2ZXIsIFtSRU1PVEVdOiByZW1vdGUgfSA9IHRoaXM7CiAgICBpZiAoREVCVUcpCiAgICAgIGNvbnNvbGUubG9nKGBbJHtyZWNlaXZlcn1dIHNlbmRpbmcgWyR7ZXZlbnROYW1lfV0gdG8gWyR7cmVtb3RlfV06YCwgZGF0YSk7CiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICBjb25zdCByZXNwb25zZU5hbWUgPSBnZXRSZXNwb25zZU5hbWUoZXZlbnROYW1lKTsKCiAgICAgIC8vIGNsZWFudXAgZnVuY3Rpb24gZm9yIHRoZSBldmVudCBsaXN0ZW5lcgogICAgICBsZXQgY2xlYW51cCA9IChkYXRhID0gdW5kZWZpbmVkKSA9PiB7CiAgICAgICAgaWYgKERFQlVHKSBjb25zb2xlLmxvZyhgWyR7cmVjZWl2ZXJ9XSBjbGVhbnVwYCk7CiAgICAgICAgLy8gY2xlYW4gdXAgYW5kIGJlY29tZSBhIG5vb3Agc28gd2UgY2FuJ3QgYmUgcmV0cmlnZ2VyZWQuCiAgICAgICAgdGhpcy5fX29mZihyZXNwb25zZU5hbWUsIGhhbmRsZXIpOwogICAgICAgIGNsZWFudXAgPSAoKSA9PiB7fTsKICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICB9OwoKICAgICAgLy8gSW4gb3JkZXIgdG8gcmVzb2x2ZSB0aGUgUHJvbWlzZSwgd2Ugd2lsbCBiZSBsaXN0ZW5pbmcKICAgICAgLy8gZm9yIHRoYXQgZXZlbnROYW1lOnJlc3BvbnNlLCBhbmQgd2hlbiB3ZSByZWNlaXZlIGl0LAogICAgICAvLyB3ZSdsbCBpbW1lZGlhdGVseSBTVE9QIGxpc3RlbmluZyBmb3Igc2ltaWxhciByZXNwb25zZXMKICAgICAgLy8gYmVjYXVzZSB3ZSBubyBsb25nZXIgY2FyZS4KICAgICAgY29uc3QgaGFuZGxlciA9IChkYXRhKSA9PiBjbGVhbnVwKGRhdGEpOwoKICAgICAgLy8gRmlyc3QsIG1ha2Ugc3VyZSB3ZSdyZSByZWFkeSB0byByZWNlaXZlIHRoZSByZXNwb25zZS4uLgogICAgICB0aGlzLl9fb24ocmVzcG9uc2VOYW1lLCAoZGF0YSkgPT4gewogICAgICAgIGlmIChERUJVRykKICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICBgWyR7cmVjZWl2ZXJ9XSBoYW5kbGluZyByZXNwb25zZSBmb3IgJHtldmVudE5hbWV9IGZyb20gWyR7cmVtb3RlfV06YCwKICAgICAgICAgICk7CiAgICAgICAgaGFuZGxlcihkYXRhKTsKICAgICAgfSk7CgogICAgICAvLyBBbmQgdGhlbiwgc2VuZCB0aGUgZXZlbnQgb2ZmIHRvIHRoZSBjbGllbnQuCiAgICAgIGNvbnN0IHNlbmRFdmVudCA9ICgpID0+IHsKICAgICAgICBpZiAoREVCVUcpCiAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgYChyYXcpIHNlbmRpbmcgJHtldmVudE5hbWV9IGZyb20gJHtyZWNlaXZlcn0gdG8gJHtyZW1vdGV9YCwKICAgICAgICAgICk7CiAgICAgICAgc3VwZXIuc2VuZCgKICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgbmFtZTogZXZlbnROYW1lLAogICAgICAgICAgICBwYXlsb2FkOiBkYXRhLAogICAgICAgICAgfSksCiAgICAgICAgKTsKICAgICAgfTsKCiAgICAgIC8vIFdlIG1heSBiZSB0cnlpbmcgdG8gc2VuZCBiZWZvcmUgdGhlIHNvY2tldCBpcyBvcGVuIGluIGJyb3dzZXIgbGFuZCwKICAgICAgLy8gc28gaWYgdGhlIHNvY2tldCdzIG5vdCByZWFkeSwgInF1ZXVlIiB0aGUgZXZlbnQgdG8gZmlyZSBvbiBvcGVuLgogICAgICBpZiAoc3VwZXIucmVhZHlTdGF0ZSA9PT0gMSkgc2VuZEV2ZW50KCk7CiAgICAgIGVsc2Ugc3VwZXIub25vcGVuID0gc2VuZEV2ZW50OwoKICAgICAgLy8gQW5kIG1ha2Ugc3VyZSB0aGF0IGlmIG5vIHJlc3BvbnNlIGhhcyBvY2N1cnJlZCB3aXRoaW4KICAgICAgLy8gYHRpbWVvdXRgIG1pbGxpc2Vjb25kcywgd2UgY2xlYW4gdXAgdGhlIGxpc3RlbmVyLgogICAgICBpZiAoaXNGaW5pdGUodGltZW91dCkpIHsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNsZWFudXAoKSwgdGltZW91dCk7CiAgICAgIH0KICAgIH0pOwogIH0KfQoKLyoqCiAqIEEgc29ja2V0IHByb3h5IGZvciBSUEMgcHVycG9zZXMuCiAqLwpjbGFzcyBTb2NrZXRQcm94eSBleHRlbmRzIEZ1bmN0aW9uIHsKICBjb25zdHJ1Y3Rvcihzb2NrZXQsIHJlY2VpdmVyLCByZW1vdGUsIHBhdGggPSBgYCkgewogICAgc3VwZXIoKTsKICAgIHRoaXNbUkVDRUlWRVJdID0gcmVjZWl2ZXI7CiAgICB0aGlzW1JFTU9URV0gPSByZW1vdGU7CiAgICB0aGlzLmlkID0gdXVpZCgpOwogICAgdGhpcy5wYXRoID0gcGF0aDsKICAgIHRoaXMuc29ja2V0ID0gc29ja2V0OwogICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7CiAgICAgIGdldDogKF8sIHByb3ApID0+IHsKICAgICAgICBpZiAocHJvcCA9PT0gImlkIikgcmV0dXJuIHRoaXMuaWQ7CiAgICAgICAgaWYgKHByb3AgPT09ICJzb2NrZXQiKSByZXR1cm4gdGhpcy5zb2NrZXQ7CiAgICAgICAgLy8gQHRzLWlnbm9yZTogd2UncmUgbmV2ZXIgaW52b2tpbmcgdGhpcyB3aXRoIFN5bWJvbCBhcyBzZWNvbmQgYXJndW1lbnQKICAgICAgICByZXR1cm4gbmV3IFNvY2tldFByb3h5KHNvY2tldCwgcmVjZWl2ZXIsIHJlbW90ZSwgYCR7cGF0aH06JHtwcm9wfWApOwogICAgICB9LAogICAgICBhcHBseTogYXN5bmMgKF8sIF9fLCBhcmdzKSA9PiB7CiAgICAgICAgaWYgKERFQlVHKQogICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgIGBbU1BhcHBseV0gc2VuZGluZyAke3RoaXMucGF0aC5zdWJzdHJpbmcoMSl9IHJlY2VpdmVyICR7CiAgICAgICAgICAgICAgdGhpc1tSRUNFSVZFUl0KICAgICAgICAgICAgfSB0byAke3RoaXNbUkVNT1RFXX1gLAogICAgICAgICAgKTsKCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuc29ja2V0LnVwZ3JhZGVkLnNlbmQoCiAgICAgICAgICB0aGlzLnBhdGguc3Vic3RyaW5nKDEpLAogICAgICAgICAgYXJncywKICAgICAgICAgIHRoaXNbUkVNT1RFXSA9PT0gQlJPV1NFUiA/IEluZmluaXR5IDogdW5kZWZpbmVkLAogICAgICAgICk7CgogICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgUlBDRXJyb3IpIHsKICAgICAgICAgIGNvbnN0IGFyZ3N0ciA9IFsuLi5uZXcgQXJyYXkoYXJncy5sZW5ndGgpXQogICAgICAgICAgICAubWFwKChfLCBpKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgaSkpCiAgICAgICAgICAgIC5qb2luKGAsYCk7CgogICAgICAgICAgaWYgKERFQlVHKQogICAgICAgICAgICBjb25zb2xlLmVycm9yKAogICAgICAgICAgICAgIGBFUlJPUiBjYWxsaW5nIFtbJHtkYXRhLm9yaWdpbk5hbWV9XV0uJHt0aGlzLnBhdGgKICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMSkKICAgICAgICAgICAgICAgIC5yZXBsYWNlQWxsKGA6YCwgYC5gKX0oJHthcmdzdHJ9KTogJHtkYXRhLm1lc3NhZ2V9YCwKICAgICAgICAgICAgKTsKCiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5tZXNzYWdlKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBkYXRhOwogICAgICB9LAogICAgfSk7CiAgfQp9CgovKioKICogQ3JlYXRlIGEgcHJveGllZCBzb2NrZXQgd2hlcmUgdGhlIGNhbGxlciBsaXRlcmFsbHkgZG9lc24ndCBuZWVkCiAqIHRvIGNhcmUsIHRoZXkganVzdCBuZWVkIHRvIGNhbGwgZnVuY3Rpb25zIGFzIGlmIHRoZXkncmUgbG9jYWxzLgogKgogKiBAcGFyYW0ge3N0cmluZ30gcmVjZWl2ZXIgVGhlIG5hbWUgb2YgdGhlIHJlY2VpdmVyIGZvciB0aGlzIHNvY2tldAogKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlIFRoZSBuYW1lIG9mIHRoZSByZW1vdGUgZm9yIHRoaXMgc29ja2V0CiAqIEBwYXJhbSB7Kn0gb3JpZ2luIFRoZSBjYWxsaW5nIG9iamVjdCwgdXNlZCBmb3IgdGhpbmdzIGxpa2UgImlsbGVnYWwgZm5hbWVzIiwgc3RhdGUgbWFuYWdlbWVudCwgZXRjLgogKiBAcGFyYW0geyp9IHNvY2tldCBUaGUgc29ja2V0IHdlJ3JlIHdyYXBwaW5nLgogKiBAcmV0dXJucwogKi8KZXhwb3J0IGZ1bmN0aW9uIHByb3h5U29ja2V0KHJlY2VpdmVyLCByZW1vdGUsIG9yaWdpbiwgc29ja2V0KSB7CiAgc29ja2V0ID0gVXBncmFkZWRTb2NrZXQudXBncmFkZShzb2NrZXQsIG9yaWdpbiwgcmVjZWl2ZXIsIHJlbW90ZSk7CiAgcmV0dXJuIChzb2NrZXRbUFJPWFldID0gbmV3IFNvY2tldFByb3h5KHNvY2tldCwgcmVjZWl2ZXIsIHJlbW90ZSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckNsaWVudChCcm93c2VyQ2xpZW50Q2xhc3MpIHsKICAgIGNvbnN0IHByb3BlcnR5Q29uZmlnID0geyB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlfTsKICAgIGNvbnN0IGJyb3dzZXJDbGllbnQgPSBuZXcgQnJvd3NlckNsaWVudENsYXNzKCk7CgogICAgLy8gY3JlYXRlIHRoZSB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gLSBub3RlIHRoYXQgaWYgdGhlcmUgYXJlIGFueSBxdWVyeSBhcmd1bWVudHMsCiAgICAvLyB0aG9zZSB3aWxsIGdldCBwYXNzZWQgaW50byB0aGUgd2Vic29ja2V0IHVwZ3JhZGUgcmVxdWVzdCwgdG9vLgogICAgY29uc3Qgc29ja2V0ID0gbmV3IFdlYlNvY2tldCh3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKCJodHRwIiwgIndzIikpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJyb3dzZXJDbGllbnQsICJzb2NrZXQiLCB7CiAgICAgIC4uLnByb3BlcnR5Q29uZmlnLAogICAgICB2YWx1ZTogc29ja2V0LAogICAgfSk7CgogICAgLy8gY3JlYXRlIGEgcHJveHkgZm9yIHRoZSAod2ViY2xpZW50IHR1bm5lbCB0byB0aGUpIHNlcnZlcjoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShicm93c2VyQ2xpZW50LCAic2VydmVyIiwgewogICAgICAuLi5wcm9wZXJ0eUNvbmZpZywKICAgICAgdmFsdWU6IHByb3h5U29ja2V0KCJicm93c2VyIiwgIndlYmNsaWVudCIsIGJyb3dzZXJDbGllbnQsIHNvY2tldCksCiAgICB9KTsKCiAgICBicm93c2VyQ2xpZW50LnN0YXRlID0ge307CiAgICBicm93c2VyQ2xpZW50LmluaXQ/LigpOwogICAgcmV0dXJuIGJyb3dzZXJDbGllbnQ7CiAgfTsKKGZ1bmN0aW9uKHAscil7Im9iamVjdCI9PT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPT10eXBlb2YgbW9kdWxlP3IoZXhwb3J0cyk6ImZ1bmN0aW9uIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFsiZXhwb3J0cyJdLHIpOihwPSJ1bmRlZmluZWQiIT09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpwfHxzZWxmLHIocC5yZmM2OTAyPXt9KSl9KSh0aGlzLGZ1bmN0aW9uKHApe2Z1bmN0aW9uIHIoYSl7cmV0dXJuIGEucmVwbGFjZSgvfjEvZywiLyIpLnJlcGxhY2UoL34wL2csIn4iKX1mdW5jdGlvbiBFKGEpe3JldHVybiBhLnJlcGxhY2UoL34vZywifjAiKS5yZXBsYWNlKC9cLy9nLCJ+MSIpfWZ1bmN0aW9uIHooYSl7cmV0dXJuIHZvaWQgMD09PWE/InVuZGVmaW5lZCI6bnVsbD09PWE/Im51bGwiOkFycmF5LmlzQXJyYXkoYSk/ImFycmF5Ijp0eXBlb2YgYX1mdW5jdGlvbiB2KGEpe2lmKG51bGw9PWF8fCJvYmplY3QiIT10eXBlb2YgYSlyZXR1cm4gYTsKaWYoYS5jb25zdHJ1Y3Rvcj09QXJyYXkpe3ZhciBiPWEubGVuZ3RoLGM9QXJyYXkoYik7Zm9yKGxldCBkPTA7ZDxiO2QrKyljW2RdPXYoYVtkXSk7cmV0dXJuIGN9aWYoYS5jb25zdHJ1Y3Rvcj09RGF0ZSlyZXR1cm4gbmV3IERhdGUoK2EpO2I9e307Zm9yKGMgaW4gYSl3LmNhbGwoYSxjKSYmKGJbY109dihhW2NdKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gRih7b3A6YX0pe3JldHVybiJyZW1vdmUiPT09YXx8InJlcGxhY2UiPT09YXx8ImNvcHkiPT09YXx8Im1vdmUiPT09YX1mdW5jdGlvbiBBKGEsYil7Y29uc3QgYz17fTtmb3IoY29uc3QgZCBpbiBhKXcuY2FsbChhLGQpJiZ2b2lkIDAhPT1hW2RdJiYoY1tkXT0xKTtmb3IoY29uc3QgZCBpbiBiKXcuY2FsbChiLGQpJiZ2b2lkIDAhPT1iW2RdJiZkZWxldGUgY1tkXTtyZXR1cm4gT2JqZWN0LmtleXMoYyl9ZnVuY3Rpb24gRyhhKXtjb25zdCBiPWEubGVuZ3RoLGM9e307Zm9yKGxldCBkPTA7ZDxiO2QrKyl7Y29uc3QgZT1hW2RdO2Zvcihjb25zdCBmIGluIGUpdy5jYWxsKGUsCmYpJiZ2b2lkIDAhPT1lW2ZdJiYoY1tmXT0oY1tmXXx8MCkrMSl9Zm9yKGNvbnN0IGQgaW4gYyljW2RdPGImJmRlbGV0ZSBjW2RdO3JldHVybiBPYmplY3Qua2V5cyhjKX1mdW5jdGlvbiB4KGEsYil7cmV0dXJue29wZXJhdGlvbnM6YS5vcGVyYXRpb25zLmNvbmNhdChiKSxjb3N0OmEuY29zdCsxfX1mdW5jdGlvbiBIKGEsYixjLGQ9cSl7ZnVuY3Rpb24gZShrLGcpe2NvbnN0IGg9YCR7a30sJHtnfWA7dmFyIGw9ZltoXTtpZih2b2lkIDA9PT1sKXtpZigwPGsmJjA8ZyYmIWQoYVtrLTFdLGJbZy0xXSxjLmFkZChTdHJpbmcoay0xKSkpLmxlbmd0aClsPWUoay0xLGctMSk7ZWxzZXtsPVtdO2lmKDA8ayl7dmFyIHQ9ZShrLTEsZyk7bC5wdXNoKHgodCx7b3A6InJlbW92ZSIsaW5kZXg6ay0xfSkpfTA8ZyYmKHQ9ZShrLGctMSksbC5wdXNoKHgodCx7b3A6ImFkZCIsaW5kZXg6ay0xLHZhbHVlOmJbZy0xXX0pKSk7MDxrJiYwPGcmJih0PWUoay0xLGctMSksbC5wdXNoKHgodCx7b3A6InJlcGxhY2UiLAppbmRleDprLTEsb3JpZ2luYWw6YVtrLTFdLHZhbHVlOmJbZy0xXX0pKSk7bD1sLnNvcnQoKEksSik9PkkuY29zdC1KLmNvc3QpWzBdfWZbaF09bH1yZXR1cm4gbH1jb25zdCBmPXsiMCwwIjp7b3BlcmF0aW9uczpbXSxjb3N0OjB9fSxCPWlzTmFOKGEubGVuZ3RoKXx8MD49YS5sZW5ndGg/MDphLmxlbmd0aDt2YXIgdT1pc05hTihiLmxlbmd0aCl8fDA+PWIubGVuZ3RoPzA6Yi5sZW5ndGg7dT1lKEIsdSkub3BlcmF0aW9ucztbdV09dS5yZWR1Y2UoKFtrLGddLGgpPT57aWYoImFkZCI9PT1oLm9wKXt2YXIgbD1oLmluZGV4KzErZztoPXtvcDpoLm9wLHBhdGg6Yy5hZGQobDxCK2c/U3RyaW5nKGwpOiItIikudG9TdHJpbmcoKSx2YWx1ZTpoLnZhbHVlfTtyZXR1cm5bay5jb25jYXQoaCksZysxXX1pZigicmVtb3ZlIj09PWgub3ApcmV0dXJuIGg9e29wOmgub3AscGF0aDpjLmFkZChTdHJpbmcoaC5pbmRleCtnKSkudG9TdHJpbmcoKX0sW2suY29uY2F0KGgpLGctMV07bD1jLmFkZChTdHJpbmcoaC5pbmRleCsKZykpO2g9ZChoLm9yaWdpbmFsLGgudmFsdWUsbCk7cmV0dXJuW2suY29uY2F0KC4uLmgpLGddfSxbW10sMF0pO3JldHVybiB1fWZ1bmN0aW9uIEsoYSxiLGMsZD1xKXtjb25zdCBlPVtdO0EoYSxiKS5mb3JFYWNoKGY9PntlLnB1c2goe29wOiJyZW1vdmUiLHBhdGg6Yy5hZGQoZikudG9TdHJpbmcoKX0pfSk7QShiLGEpLmZvckVhY2goZj0+e2UucHVzaCh7b3A6ImFkZCIscGF0aDpjLmFkZChmKS50b1N0cmluZygpLHZhbHVlOmJbZl19KX0pO0coW2EsYl0pLmZvckVhY2goZj0+e2UucHVzaCguLi5kKGFbZl0sYltmXSxjLmFkZChmKSkpfSk7cmV0dXJuIGV9ZnVuY3Rpb24gcShhLGIsYyxkPXEpe2lmKGE9PT1iKXJldHVybltdO2NvbnN0IGU9eihhKSxmPXooYik7cmV0dXJuImFycmF5Ij09ZSYmImFycmF5Ij09Zj9IKGEsYixjLGQpOiJvYmplY3QiPT1lJiYib2JqZWN0Ij09Zj9LKGEsYixjLGQpOlt7b3A6InJlcGxhY2UiLHBhdGg6Yy50b1N0cmluZygpLHZhbHVlOmJ9XX1mdW5jdGlvbiB5KGEsCmIsYyl7QXJyYXkuaXNBcnJheShhKT8iLSI9PWI/YS5wdXNoKGMpOihiPXBhcnNlSW50KGIsMTApLGEuc3BsaWNlKGIsMCxjKSk6YVtiXT1jfWZ1bmN0aW9uIEMoYSxiKXtBcnJheS5pc0FycmF5KGEpPyhiPXBhcnNlSW50KGIsMTApLGEuc3BsaWNlKGIsMSkpOmRlbGV0ZSBhW2JdfWZ1bmN0aW9uIEwoYSxiKXthPW0uZnJvbUpTT04oYi5wYXRoKS5ldmFsdWF0ZShhKTtpZihudWxsPT09YS5wYXJlbnQpcmV0dXJuIG5ldyBuKGIucGF0aCk7aWYoQXJyYXkuaXNBcnJheShhLnBhcmVudCkpe2lmKHBhcnNlSW50KGEua2V5LDEwKT49YS5wYXJlbnQubGVuZ3RoKXJldHVybiBuZXcgbihiLnBhdGgpfWVsc2UgaWYodm9pZCAwPT09YS52YWx1ZSlyZXR1cm4gbmV3IG4oYi5wYXRoKTthLnBhcmVudFthLmtleV09Yi52YWx1ZTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBNKGEsYil7c3dpdGNoKGIub3Ape2Nhc2UgImFkZCI6cmV0dXJuIGE9bS5mcm9tSlNPTihiLnBhdGgpLmV2YWx1YXRlKGEpLHZvaWQgMD09PQphLnBhcmVudD9iPW5ldyBuKGIucGF0aCk6KHkoYS5wYXJlbnQsYS5rZXksdihiLnZhbHVlKSksYj1udWxsKSxiO2Nhc2UgInJlbW92ZSI6cmV0dXJuIGE9bS5mcm9tSlNPTihiLnBhdGgpLmV2YWx1YXRlKGEpLHZvaWQgMD09PWEudmFsdWU/Yj1uZXcgbihiLnBhdGgpOihDKGEucGFyZW50LGEua2V5KSxiPW51bGwpLGI7Y2FzZSAicmVwbGFjZSI6cmV0dXJuIEwoYSxiKTtjYXNlICJtb3ZlIjp2YXIgYz1tLmZyb21KU09OKGIuZnJvbSkuZXZhbHVhdGUoYSk7dm9pZCAwPT09Yy52YWx1ZT9iPW5ldyBuKGIuZnJvbSk6KGE9bS5mcm9tSlNPTihiLnBhdGgpLmV2YWx1YXRlKGEpLHZvaWQgMD09PWEucGFyZW50P2I9bmV3IG4oYi5wYXRoKTooQyhjLnBhcmVudCxjLmtleSkseShhLnBhcmVudCxhLmtleSxjLnZhbHVlKSxiPW51bGwpKTtyZXR1cm4gYjtjYXNlICJjb3B5IjpyZXR1cm4gYz1tLmZyb21KU09OKGIuZnJvbSkuZXZhbHVhdGUoYSksdm9pZCAwPT09Yy52YWx1ZT9iPW5ldyBuKGIuZnJvbSk6CihhPW0uZnJvbUpTT04oYi5wYXRoKS5ldmFsdWF0ZShhKSx2b2lkIDA9PT1hLnBhcmVudD9iPW5ldyBuKGIucGF0aCk6KHkoYS5wYXJlbnQsYS5rZXksdihjLnZhbHVlKSksYj1udWxsKSksYjtjYXNlICJ0ZXN0IjpyZXR1cm4gYT1tLmZyb21KU09OKGIucGF0aCkuZXZhbHVhdGUoYSksYj1xKGEudmFsdWUsYi52YWx1ZSxuZXcgbSkubGVuZ3RoP25ldyBOKGEudmFsdWUsYi52YWx1ZSk6bnVsbCxifXJldHVybiBuZXcgTyhiKX1mdW5jdGlvbiBQKGEpe2Z1bmN0aW9uIGIoYyxkLGUpe2NvbnN0IGY9YShjLGQsZSk7cmV0dXJuIEFycmF5LmlzQXJyYXkoZik/ZjpxKGMsZCxlLGIpfXJldHVybiBifWZ1bmN0aW9uIEQoYSxiKXthPW0uZnJvbUpTT04oYikuZXZhbHVhdGUoYSk7aWYodm9pZCAwIT09YSlyZXR1cm57b3A6InRlc3QiLHBhdGg6Yix2YWx1ZTphLnZhbHVlfX1jbGFzcyBte2NvbnN0cnVjdG9yKGE9WyIiXSl7dGhpcy50b2tlbnM9YX1zdGF0aWMgZnJvbUpTT04oYSl7Y29uc3QgYj0KYS5zcGxpdCgiLyIpLm1hcChyKTtpZigiIiE9PWJbMF0pdGhyb3cgRXJyb3IoYEludmFsaWQgSlNPTiBQb2ludGVyOiAke2F9YCk7cmV0dXJuIG5ldyBtKGIpfXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMudG9rZW5zLm1hcChFKS5qb2luKCIvIil9ZXZhbHVhdGUoYSl7bGV0IGI9bnVsbCxjPSIiO2ZvcihsZXQgZD0xLGU9dGhpcy50b2tlbnMubGVuZ3RoO2Q8ZTtkKyspYj1hLGM9dGhpcy50b2tlbnNbZF0sIl9fcHJvdG9fXyIhPWMmJiJjb25zdHJ1Y3RvciIhPWMmJiJwcm90b3R5cGUiIT1jJiYoYT0oYnx8e30pW2NdKTtyZXR1cm57cGFyZW50OmIsa2V5OmMsdmFsdWU6YX19Z2V0KGEpe3JldHVybiB0aGlzLmV2YWx1YXRlKGEpLnZhbHVlfXNldChhLGIpe2ZvcihsZXQgYz0xLGQ9dGhpcy50b2tlbnMubGVuZ3RoLTEsZT10aGlzLnRva2Vuc1tjXTtjPGQ7YysrKWE9KGF8fHt9KVtlXTthJiYoYVt0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGgtMV1dPWIpfXB1c2goYSl7dGhpcy50b2tlbnMucHVzaChhKX1hZGQoYSl7YT0KdGhpcy50b2tlbnMuY29uY2F0KFN0cmluZyhhKSk7cmV0dXJuIG5ldyBtKGEpfX1jb25zdCB3PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7Y2xhc3MgbiBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGEpe3N1cGVyKGBWYWx1ZSByZXF1aXJlZCBhdCBwYXRoOiAke2F9YCk7dGhpcy5wYXRoPWE7dGhpcy5uYW1lPSJNaXNzaW5nRXJyb3IifX1jbGFzcyBOIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoYSxiKXtzdXBlcihgVGVzdCBmYWlsZWQ6ICR7YX0gIT0gJHtifWApO3RoaXMuYWN0dWFsPWE7dGhpcy5leHBlY3RlZD1iO3RoaXMubmFtZT0iVGVzdEVycm9yIn19Y2xhc3MgTyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGEpe3N1cGVyKGBJbnZhbGlkIG9wZXJhdGlvbjogJHthLm9wfWApO3RoaXMub3BlcmF0aW9uPWE7dGhpcy5uYW1lPSJJbnZhbGlkT3BlcmF0aW9uRXJyb3IifX1wLmFwcGx5UGF0Y2g9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi5tYXAoYz0+TShhLGMpKX07CnAuY3JlYXRlUGF0Y2g9ZnVuY3Rpb24oYSxiLGMpe2NvbnN0IGQ9bmV3IG07cmV0dXJuKGM/UChjKTpxKShhLGIsZCl9O3AuY3JlYXRlVGVzdHM9ZnVuY3Rpb24oYSxiKXtjb25zdCBjPVtdO2IuZmlsdGVyKEYpLmZvckVhY2goZD0+e2NvbnN0IGU9RChhLGQucGF0aCk7ZSYmYy5wdXNoKGUpOyJmcm9tImluIGQmJihkPUQoYSxkLmZyb20pKSYmYy5wdXNoKGQpfSk7cmV0dXJuIGN9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShwLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KX0pOwo=");var tg=!1,q={".html":"text/html",".css":"text/css",".js":"application/javascript",".jpg":"image/jpeg",".png":"image/png"},dg="text/plain";function x(C){let I=Object.keys(q).find(l=>C.slice(-l.length)===l);return q[I]||dg}function Zg(C,I){return C==="/"?$(I,"index.html"):(C=C.substring(1),C=C.replaceAll("../","/").replace(/\/+/g,"/"),C=$(I,C),C)}function gg(C,I,g=""){tg&&console.error(g??`Can't serve ${C}, so it probably doesn't exist`),I.writeHead(404,{"Content-Type":x(".html")}),I.end("<doctype html><html><body>resource not found</body></html>")}function Ig(C,I,g){return async(l,c)=>{if(l.params={get:o=>{}},l.url.includes("?")){let[o,n]=l.url.split(/\\?\?/);l.url=o,l.params=new URLSearchParams(n)}let{url:e,params:d}=l;if(e==="/favicon.ico")return c.writeHead(200,{"Content-Type":"text/plain"}),c.end("","utf-8");if(e==="/socketless.js"){let o=C.params.get("sid");return o&&d.get("sid")!==o?gg("socketless.js",c,"sid mismatch, not serving socketless.js"):(c.writeHead(200,{"Content-Type":x(".js")}),c.end(_,"utf-8"))}if(!await g.handle(e,l,c)){var s=Zg(l.url,I);sg.readFile(s,(o,n)=>{if(o)return gg(s,c);c.writeHead(200,{"Content-Type":x(s)}),c.end(n,"utf-8")})}}}var Gg=!0,mg=!1,ag=Symbol("allow self-signed certificates");function xg(C,I){C=E(C),I=P(I);let g=M(C),l={createServer:function(e){let d,s;e?.constructor===Object?s=e:d=e;let o=d;if(!o){let t=new H(null),i=(G,b)=>{if(G.url.includes("?")){let[B,h]=G.url.split(/\\?\?/);G.url=B,G.params=new URLSearchParams(h)}t.handle(G.url,G,b)};o=s?cg.createServer(s,i):lg.createServer(i),o.addRoute=t.addRouteHandler.bind(t),o.removeRoute=t.removeRoute.bind(t)}let n=new og({noServer:!0});n.on("error",t=>Z.onError(t)),o.on("upgrade",(t,i,G)=>{n.handleUpgrade(t,i,G,b=>{n.emit("connection",b,t)})});let Z=new I(n,o);return n.on("connection",function(t){Z.connectClientSocket(t)}),{server:Z,webserver:o}},createClient:function(e,d,s=C){e=e.replace("http","ws");let o=new s,n={get:i=>{}};e.includes("?")&&(n=new URLSearchParams(e.split("?")[1])),Object.defineProperty(o,"params",{value:n,writable:!1,configurable:!1,enumerable:!1});let Z=new bg(e,{rejectUnauthorized:d!==ag});Z.on("error",i=>o.onError(i)),Z.on("close",(...i)=>o.onDisconnect(...i));function t(i){try{let{name:G,payload:b}=JSON.parse(i);G==="handshake:setid"&&(Z.off("message",t),o.setState(b),o.connectServerSocket(Z))}catch{}}return Z.on("message",t),o},createWebClient:function(e,d,s,o){let n=l.createClient(e,o,g),Z=new H(n),t=Ig(n,d,Z),i=s?cg.createServer(s,t):lg.createServer(t),G=new og({noServer:!0});return i.on("upgrade",(b,B,h)=>{let V=b.url,A={get:Y=>{}};V.includes("?")&&(A=new URLSearchParams(V.split("?")[1]));let W=n.params.get("sid");if(W&&A.get("sid")!==W)return mg&&console.error("incorrect SID provided during ws upgrade request"),B.end();G.handleUpgrade(b,B,h,Y=>{G.emit("connection",Y,b)})}),n.ws=G,n.webserver=i,G.on("connection",b=>{n.connectBrowserSocket(b),b.on("message",async B=>{B=B.toString();let{name:h,payload:V,error:A}=JSON.parse(B);if(A)throw new Error(A);let W=v(h);if(h==="syncState"){let Y=await n.syncState();return b.send(JSON.stringify({name:W,payload:Y}))}if(h.endsWith(k))n.browser.socket.router(B,Gg);else{let Y=n.server,a=h.split(":");for(;a.length;)Y=Y[a.shift()];let S=await Y(...V);b.send(JSON.stringify({name:W,payload:S}))}}),b.on("close",()=>{n.disconnectBrowserSocket()})}),i.addRoute=Z.addRouteHandler.bind(Z),i.removeRoute=Z.removeRoute.bind(Z),{client:n,clientWebServer:i}}};return l}export{ag as ALLOW_SELF_SIGNED_CERTS,xg as linkClasses};
