import gg from"node:http";import Ig from"node:https";import{WebSocket as sg,WebSocketServer as cg}from"ws";import{WebSocket as Cg}from"ws";var F="server",K="client",z="webclient",X="browser";var v=class{constructor(I,g){this.originName=I,this.message=g}},b=!1;function ng(){let C=Date.now().toString(16),I=(1e6*Math.random()|0).toString(16);return`${C}-${I}`}var w=":response",H=C=>`${C}${w}`,k=Symbol("origin"),f=Symbol("proxy"),p=Symbol("receiver"),y=Symbol("remote"),R=Symbol("handlers"),U=class C extends Cg{[k]=void 0;[f]=void 0;[p]="";[y]="";[R]={};constructor(){throw new Error("Cannot create UpgradedSocket instances. Use UpgradedSocket.upgrade(name, origin, socket) instead.")}static upgrade(I,g,c,l){if(I instanceof C)return I;Object.setPrototypeOf(I,C.prototype),I[k]=g,I[p]=c,I[y]=l,I[R]={};let n=I.router.bind(I);return I.on?I.on("message",n):I.onmessage=n,I}get upgraded(){return this.__upgraded||(this.__upgraded={on:(...I)=>this.__on(...I),off:(...I)=>this.__off(...I),send:(...I)=>this.__send(...I)}),this.__upgraded}async router(I,g=!1){let{[k]:c,[p]:l,[y]:n}=this;if(n===X&&!g)return;I.srcElement&&(I=I.data);let Z;try{Z=JSON.parse(I)}catch{return console.error(`Could not parse websocket data: ${I}`)}let{name:e,payload:o,error:i,diff:G,seq_num:s}=Z,{state:t}=Z,m=i?new v(l,i):void 0;if(b&&console.log(`[${l}]/[${n}] router running given:`,{eventName:e,payload:o,errorMsg:i,state:t,diff:G,seq_num:s}),t&&l===X){b&&console.log("handling state update in the browser",t),b&&console.log("origin object:",{origin:c});let d=JSON.parse(JSON.stringify(c.state));if(G){b&&console.log("received diff",t);let Y=t,u;if(s===c.__seq_num+1)c.__seq_num=s,u=JSON.parse(JSON.stringify(d)),b&&console.log("applying patch to",u),rfc6902.applyPatch(u,Y);else{b&&console.log("seq_num mismatch, syncing state");let lg=await this.__send("syncState");c.__seq_num=0,u=lg}t=u}return c.state=t,c.update?.(d)}if(e.endsWith(w)){let{[R]:d}=this;if(b&&console.log(`[${l}] response message received`),!d[e])throw new Error(`no handlers for ${e}`);d[e].forEach(Y=>{Y(m||o)});return}if(o&&!Array.isArray(o))throw new Error(`[${l}] received payload for ${e} from [${n}] but it was not an array? ${JSON.stringify(o,null,2)}`);let B=e.split(":");b&&console.log(`[${l}] router: stages:`,B);let a=c,h=c.__proto__?.constructor.disallowedCalls??[],W,V;try{let[d]=B;if(B.length===1&&h.includes(d))throw new Error(`Illegal call: ${d} is a protected method`);for(;B.length;){let Y=B.shift();b&&console.log(`checking ${Y}`),a=a[Y]}l==="server"&&o.unshift(this[f])}catch(d){b&&console.error(`cannot resolve ${e} on ${l}`,d),W=d.message}if(!W)try{V=await a.bind(c)(...o)??!0,l===K&&c.browser&&c.setState(c.state)}catch(d){b&&console.error(`function invocation for ${e} failed on ${l}, payload:`,o),b&&console.error(d),W=`Cannot call [[${l}]].${e.replaceAll(":",".")}, function is not defined.`}let S=H(e);b&&console.log(`[${l}] sending ${S}`,{payload:V,error:W}),super.send(JSON.stringify({name:S,payload:V,error:W}))}__on(I,g){let{[R]:c}=this;return c[I]||(c[I]=[]),c[I].push(g),()=>this.__off(I,g)}__off(I,g){let{[R]:c}=this;if(!c[I])return;let l=c[I].indexOf(g);c[I].splice(l,1)}async __send(I,g={},c=1e3){let{[p]:l,[y]:n}=this;return b&&console.log(`[${l}] sending [${I}] to [${n}]:`,g),await new Promise((Z,e)=>{let o=H(I),i=(t=void 0)=>{b&&console.log(`[${l}] cleanup`),this.__off(o,G),i=()=>{},Z(t)},G=t=>i(t);this.__on(o,t=>{b&&console.log(`[${l}] handling response for ${I} from [${n}]:`),G(t)});let s=()=>{b&&console.log(`(raw) sending ${I} from ${l} to ${n}`),super.send(JSON.stringify({name:I,payload:g}))};super.readyState===1?s():super.onopen=s,isFinite(c)&&setTimeout(()=>i(),c)})}},L=class C extends Function{constructor(I,g,c,l=""){return super(),this[p]=g,this[y]=c,this.id=ng(),this.path=l,this.socket=I,new Proxy(this,{get:(n,Z)=>Z==="id"?this.id:Z==="socket"?this.socket:new C(I,g,c,`${l}:${Z}`),apply:async(n,Z,e)=>{b&&console.log(`[SPapply] sending ${this.path.substring(1)} receiver ${this[p]} to ${this[y]}`);let o=await this.socket.upgraded.send(this.path.substring(1),e,this[y]===X?1/0:void 0);if(o instanceof v){let i=[...new Array(e.length)].map((G,s)=>String.fromCharCode(97+s)).join(",");throw b&&console.error(`ERROR calling [[${o.originName}]].${this.path.substring(1).replaceAll(":",".")}(${i}): ${o.message}`),new Error(o.message)}return o}})}};function N(C,I,g,c){return c=U.upgrade(c,g,C,I),c[f]=new L(c,C,I)}var A=!1,T=Symbol();function x(C){return class Q extends C{static get disallowedCalls(){let g=Object.getOwnPropertyNames(Q.prototype);return["constructor","disconnect"].forEach(c=>g.splice(g.indexOf(c),1)),g}constructor(){super();let g=this[T]={},c=new Proxy(g,{get:(l,n)=>g[n],set:()=>{throw new Error("cannot directly assign to state, use setState(update)")}});Object.defineProperty(this,"state",{value:c,writable:!1,configurable:!1}),this.onConnect||(this.onConnect=async()=>{A&&console.log(`[ClientBase] client ${this.state.id} connected.`)}),this.onDisconnect||(this.onDisconnect=async()=>{A&&console.log(`[ClientBase] client ${this.state.id} disconnected.`)}),this.onQuit||(this.onQuit=async()=>{A&&console.log(`[ClientBase] client ${this.state.id} quitting.`)})}setState(g){A&&console.log("[ClientBase] updating state");let c=this[T];Object.entries(g).forEach(([l,n])=>c[l]=n)}connectServerSocket(g){A&&console.log("[ClientBase]  connected to server"),this.server=N(K,F,this,g),this.onConnect()}disconnect(){this.server.socket.close()}}}function E(C){return class j extends C{clients=[];ws=void 0;webserver=void 0;static get disallowedCalls(){let g=Object.getOwnPropertyNames(j.prototype);return g.splice(g.indexOf("constructor"),1),g}constructor(g,c){super(),this.ws=g,this.webserver=c}async connectClientSocket(g){A&&console.log("[ServerBase] client connecting to server...");let c=N(F,K,this,g);A&&console.log("[ServerBase] sending connection id"),c.socket.send(JSON.stringify({name:"handshake:setid",payload:{id:c.id}})),A&&console.log("[ServerBase] adding client to list of known clients"),this.clients.push(c),this.addDisconnectHandling(c,g),this.onConnect(c)}async addDisconnectHandling(g,c){let{clients:l}=this;c.on("close",()=>{let n=l.findIndex(Z=>Z===g);if(n!==-1){let Z=l.splice(n,1)[0];this.onDisconnect(g)}})}async onDisconnect(g){if(super.onDisconnect)return super.onDisconnect(g);A&&console.log(`[ServerBase] client ${g.id} disconnected.`)}async onConnect(g){if(super.onConnect)return super.onConnect(g);A&&console.log(`[ServerBase] client ${g.id} connected.`)}async quit(){await this.onQuit(),this.clients.forEach(g=>g.disconnect()),this.webserver.close(),this.ws.close(),this.teardown()}async onQuit(){if(super.onQuit)return super.onQuit();A&&console.log("[ServerBase] told to quit.")}async teardown(){if(super.teardown)return super.teardown();A&&console.log("[ServerBase] post-quit teardown.")}}}import{createPatch as og}from"rfc6902";var r=!1;function O(C){return class P extends C{browser=void 0;constructor(){super(),this.onBrowserConnect||(this.onBrowserConnect=async g=>{r&&console.log("[WebClientBase] browser connected.")}),this.onBrowserDisconnect||(this.onBrowserDisconnect=async g=>{r&&console.log("[WebClientBase] browser disconnected.")})}static get disallowedCalls(){let g=Object.getOwnPropertyNames(P.prototype).concat(C.disallowedCalls);return["constructor","quit","syncState"].forEach(c=>g.splice(g.indexOf(c),1)),g}connectBrowserSocket(g){this.browser||(this.browser=N(z,X,this,g),this.browser.socket.__seq_num=0,this.setState(this.state),this.onBrowserConnect(this.browser))}disconnectBrowserSocket(){this.onBrowserDisconnect(this.browser),this.browser=void 0}setState(g){if(r&&console.log("[WebClientBase] setState"),super.setState(g),r&&console.log("[WebClientBase] client has browser?",!!this.browser),this.browser){r&&console.log("[WebClientBase] creating diff as part of setState");let c=og(this.__oldState??{},this.state);if(c.length>0){let l={state:c,seq_num:++this.browser.socket.__seq_num,diff:!0};r&&console.log("[WebClientBase] sending diff as part of setState:",l),this.browser.socket.send(JSON.stringify(l))}else r&&console.log("no difference, skipping state sync.")}this.__oldState=JSON.parse(JSON.stringify(this.state))}syncState(){if(this.browser){r&&console.log("[WebClientBase] running syncState (will respond with full state)");let g=JSON.parse(JSON.stringify(this.state));return this.browser.socket.__seq_num=0,r&&console.log("[WebClientBase] responding with full state:",g),g}throw new Error("[WebClientBase] Cannot sync state: no browser attached to client.")}quit(){this.browser&&(this.browser.socket.close(),this.disconnectBrowserSocket()),this.disconnect(),this.onQuit()}}}var J=class{constructor(I){this.owner=I,this.routes={}}addRouteHandler(I,...g){this.routes[I]=g}removeRoute(I){delete this.routes[I]}async handle(I,g,c){let l=this.routes[I];if(!l)return!1;for(let n=0,Z=l.length;n<Z;n++){let e=l[n],o=!0,i=()=>o=!1;try{await e(g,c,i)}catch(G){console.error(G),console.trace();break}if(o)break}return!0}};import ig from"node:fs";import{join as D}from"node:path";var M=atob("");var _={".html":"text/html",".css":"text/css",".js":"application/javascript",".jpg":"image/jpeg",".png":"image/png"},eg="text/plain";function $(C){let I=Object.keys(_).find(c=>C.slice(-c.length)===c);return _[I]||eg}function tg(C,I){return C==="/"?D(I,"index.html"):(C=C.substring(1),C=C.replaceAll("../","/").replace(/\/+/g,"/"),C=D(I,C),C)}function Zg(C,I){console.error(`Can't serve ${C}, so it probably doesn't exist`),I.writeHead(404,{"Content-Type":"text/html"}),I.end("<doctype html><html><body>resource not found</body></html>")}function q(C,I){return async(g,c)=>{if(g.url.includes("?")){let[Z,e]=g.url.split(/\\?\?/);g.url=Z,g.params=new URLSearchParams(e)}let l=g.url;if(l==="/favicon.ico")return c.writeHead(200,{"Content-Type":"text/plain"}),c.end("","utf-8");if(l==="/socketless.js")return c.writeHead(200,{"Content-Type":$(".js")}),c.end(M,"utf-8");if(!await I.handle(l,g,c)){var n=tg(g.url,C);ig.readFile(n,(Z,e)=>{if(Z)return Zg(n,c);c.writeHead(200,{"Content-Type":$(n)}),c.end(e,"utf-8")})}}}var dg=!0,fg=!0;function Ug(C,I){C=x(C),I=E(I);let g=O(C),c={createServer:function(n){let Z,e;n?.constructor===Object?e=n:Z=n;let o=Z;if(!o){let s=new J(null),t=(m,B)=>{if(m.url.includes("?")){let[a,h]=m.url.split(/\\?\?/);m.url=a,m.params=new URLSearchParams(h)}s.handle(m.url,m,B)};o=e?Ig.createServer(e,t):gg.createServer(t),o.addRoute=s.addRouteHandler.bind(s),o.removeRoute=s.removeRoute.bind(s)}let i=new cg({noServer:!0});o.on("upgrade",(s,t,m)=>{i.handleUpgrade(s,t,m,B=>{i.emit("connection",B,s)})});let G=new I(i,o);return i.on("connection",function(s){G.connectClientSocket(s)}),o},createClient:function(n,Z,e=C){n=n.replace("http","ws");let o=new sg(n,{rejectUnauthorized:!Z}),i=new e;o.on("close",(...s)=>i.onDisconnect(...s));function G(s){try{let{name:t,payload:m}=JSON.parse(s);t==="handshake:setid"&&(o.off("message",G),i.setState(m),i.connectServerSocket(o))}catch{}}return o.on("message",G),i},createWebClient:function(n,Z,e,o){let i=c.createClient(n,o,g),G=new J(i),s=q(Z,G),t=e?Ig.createServer(e,s):gg.createServer(s),m=new cg({noServer:!0});return t.on("upgrade",(B,a,h)=>{m.handleUpgrade(B,a,h,W=>{m.emit("connection",W,B)})}),i.ws=m,i.webserver=t,m.on("connection",B=>{i.connectBrowserSocket(B),B.on("message",async a=>{a=a.toString();let{name:h,payload:W,error:V}=JSON.parse(a);if(V)throw new Error(V);let S=H(h);if(h==="syncState"){let d=await i.syncState();return B.send(JSON.stringify({name:S,payload:d}))}if(h==="disconnect")return i.disconnect();if(h.endsWith(w))i.browser.socket.router(a,dg);else{let d=i.server,Y=h.split(":");for(;Y.length;)d=d[Y.shift()];let u=await d(...W);B.send(JSON.stringify({name:S,payload:u}))}}),B.on("close",()=>{i.disconnectBrowserSocket()})}),t.addRoute=G.addRouteHandler.bind(G),t.removeRoute=G.removeRoute.bind(G),{client:i,clientWebServer:t}}};return c}export{fg as ALLOW_SELF_SIGNED_CERTS,Ug as linkClasses};
